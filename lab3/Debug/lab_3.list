
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005258  08005258  00006258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a4  080052a4  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052a4  080052a4  000062a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052ac  080052ac  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052ac  080052ac  000062ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052b0  080052b0  000062b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080052b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00012f2c  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f3c  20012f3c  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe7b  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029b4  00000000  00000000  00016ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00019870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb6  00000000  00000000  0001a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021986  00000000  00000000  0001b59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b76  00000000  00000000  0003cf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d212e  00000000  00000000  0004fa9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121bc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044cc  00000000  00000000  00121c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001260d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005240 	.word	0x08005240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005240 	.word	0x08005240

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MEMS_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address, uint8_t data) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	460a      	mov	r2, r1
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	4613      	mov	r3, r2
 800050a:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2108      	movs	r1, #8
 8000510:	480b      	ldr	r0, [pc, #44]	@ (8000540 <MEMS_Write+0x44>)
 8000512:	f000 fe4d 	bl	80011b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &address, 1, 10);
 8000516:	1df9      	adds	r1, r7, #7
 8000518:	230a      	movs	r3, #10
 800051a:	2201      	movs	r2, #1
 800051c:	4809      	ldr	r0, [pc, #36]	@ (8000544 <MEMS_Write+0x48>)
 800051e:	f001 fb92 	bl	8001c46 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &data, 1, 10);
 8000522:	1db9      	adds	r1, r7, #6
 8000524:	230a      	movs	r3, #10
 8000526:	2201      	movs	r2, #1
 8000528:	4806      	ldr	r0, [pc, #24]	@ (8000544 <MEMS_Write+0x48>)
 800052a:	f001 fb8c 	bl	8001c46 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2108      	movs	r1, #8
 8000532:	4803      	ldr	r0, [pc, #12]	@ (8000540 <MEMS_Write+0x44>)
 8000534:	f000 fe3c 	bl	80011b0 <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	2000002c 	.word	0x2000002c

08000548 <Green_LED_Task>:
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
  HAL_SPI_Transmit(&hspi1, &address, 1, 10);
  HAL_SPI_Receive(&hspi1, data, 1, 10);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
}
void Green_LED_Task(void *pvParameters) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  for (;;) {
    // 綠燈閃爍
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000550:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000554:	4807      	ldr	r0, [pc, #28]	@ (8000574 <Green_LED_Task+0x2c>)
 8000556:	f000 fe44 	bl	80011e2 <HAL_GPIO_TogglePin>
    uint32_t beginTime = HAL_GetTick();
 800055a:	f000 fb9f 	bl	8000c9c <HAL_GetTick>
 800055e:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - beginTime < 500 / portTICK_RATE_MS) {
 8000560:	bf00      	nop
 8000562:	f000 fb9b 	bl	8000c9c <HAL_GetTick>
 8000566:	4602      	mov	r2, r0
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000570:	d3f7      	bcc.n	8000562 <Green_LED_Task+0x1a>
  for (;;) {
 8000572:	e7ed      	b.n	8000550 <Green_LED_Task+0x8>
 8000574:	40020c00 	.word	0x40020c00

08000578 <vHandlerTask>:
    }
  }
}
void vHandlerTask(void *pvParameters) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  for (;;) {
    /* Take the semaphore */
    if (xSemaphoreTake(xSemaphore, LONG_TIME) == pdTRUE) {
 8000580:	4b26      	ldr	r3, [pc, #152]	@ (800061c <vHandlerTask+0xa4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fcad 	bl	8002ee8 <xQueueSemaphoreTake>
 800058e:	4603      	mov	r3, r0
 8000590:	2b01      	cmp	r3, #1
 8000592:	d1f5      	bne.n	8000580 <vHandlerTask+0x8>
      // semaphore was obtained
      // Orange LED blinks 5 times
      for (int i = 0; i < 10; ++i) {
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e013      	b.n	80005c2 <vHandlerTask+0x4a>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800059a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059e:	4820      	ldr	r0, [pc, #128]	@ (8000620 <vHandlerTask+0xa8>)
 80005a0:	f000 fe1f 	bl	80011e2 <HAL_GPIO_TogglePin>
        uint32_t beginTime = HAL_GetTick();
 80005a4:	f000 fb7a 	bl	8000c9c <HAL_GetTick>
 80005a8:	60b8      	str	r0, [r7, #8]
        while (HAL_GetTick() - beginTime < 500 / portTICK_RATE_MS) {
 80005aa:	bf00      	nop
 80005ac:	f000 fb76 	bl	8000c9c <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005ba:	d3f7      	bcc.n	80005ac <vHandlerTask+0x34>
      for (int i = 0; i < 10; ++i) {
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3301      	adds	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b09      	cmp	r3, #9
 80005c6:	dde8      	ble.n	800059a <vHandlerTask+0x22>
        }
      }

      // reset interrupt register
      // MEMS_Read(LIS3DSH_OUTS1_ADDR, &data);
      WAKEUP_STATE_MACHINE_CONFIG
 80005c8:	2101      	movs	r1, #1
 80005ca:	2021      	movs	r0, #33	@ 0x21
 80005cc:	f7ff ff96 	bl	80004fc <MEMS_Write>
 80005d0:	2148      	movs	r1, #72	@ 0x48
 80005d2:	2023      	movs	r0, #35	@ 0x23
 80005d4:	f7ff ff92 	bl	80004fc <MEMS_Write>
 80005d8:	2167      	movs	r1, #103	@ 0x67
 80005da:	2020      	movs	r0, #32
 80005dc:	f7ff ff8e 	bl	80004fc <MEMS_Write>
 80005e0:	2100      	movs	r1, #0
 80005e2:	2024      	movs	r0, #36	@ 0x24
 80005e4:	f7ff ff8a 	bl	80004fc <MEMS_Write>
 80005e8:	2155      	movs	r1, #85	@ 0x55
 80005ea:	2057      	movs	r0, #87	@ 0x57
 80005ec:	f7ff ff86 	bl	80004fc <MEMS_Write>
 80005f0:	2105      	movs	r1, #5
 80005f2:	2040      	movs	r0, #64	@ 0x40
 80005f4:	f7ff ff82 	bl	80004fc <MEMS_Write>
 80005f8:	2111      	movs	r1, #17
 80005fa:	2041      	movs	r0, #65	@ 0x41
 80005fc:	f7ff ff7e 	bl	80004fc <MEMS_Write>
 8000600:	21fc      	movs	r1, #252	@ 0xfc
 8000602:	2059      	movs	r0, #89	@ 0x59
 8000604:	f7ff ff7a 	bl	80004fc <MEMS_Write>
 8000608:	21fc      	movs	r1, #252	@ 0xfc
 800060a:	205a      	movs	r0, #90	@ 0x5a
 800060c:	f7ff ff76 	bl	80004fc <MEMS_Write>
 8000610:	2101      	movs	r1, #1
 8000612:	205b      	movs	r0, #91	@ 0x5b
 8000614:	f7ff ff72 	bl	80004fc <MEMS_Write>
    if (xSemaphoreTake(xSemaphore, LONG_TIME) == pdTRUE) {
 8000618:	e7b2      	b.n	8000580 <vHandlerTask+0x8>
 800061a:	bf00      	nop
 800061c:	20000084 	.word	0x20000084
 8000620:	40020c00 	.word	0x40020c00

08000624 <HAL_GPIO_EXTI_Callback>:
    }
  }
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
  /* 紅燈 toggle */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800062e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000632:	480e      	ldr	r0, [pc, #56]	@ (800066c <HAL_GPIO_EXTI_Callback+0x48>)
 8000634:	f000 fdd5 	bl	80011e2 <HAL_GPIO_TogglePin>

  /* Give the semaphore to unblock the handler task */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x4c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f107 020c 	add.w	r2, r7, #12
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fadb 	bl	8002c02 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <HAL_GPIO_EXTI_Callback+0x3e>
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x50>)
 8000654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	f3bf 8f4f 	dsb	sy
 800065e:	f3bf 8f6f 	isb	sy
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40020c00 	.word	0x40020c00
 8000670:	20000084 	.word	0x20000084
 8000674:	e000ed04 	.word	0xe000ed04

08000678 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 800067e:	f000 fad7 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f859 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f8eb 	bl	8000860 <MX_GPIO_Init>
  MX_SPI1_Init();
 800068a:	f000 f8b3 	bl	80007f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // 寫入 register //

  xSemaphore = xSemaphoreCreateBinary();
 800068e:	2203      	movs	r2, #3
 8000690:	2100      	movs	r1, #0
 8000692:	2001      	movs	r0, #1
 8000694:	f002 f8b8 	bl	8002808 <xQueueGenericCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <main+0xac>)
 800069c:	6013      	str	r3, [r2, #0]
  WAKEUP_STATE_MACHINE_CONFIG
 800069e:	2101      	movs	r1, #1
 80006a0:	2021      	movs	r0, #33	@ 0x21
 80006a2:	f7ff ff2b 	bl	80004fc <MEMS_Write>
 80006a6:	2148      	movs	r1, #72	@ 0x48
 80006a8:	2023      	movs	r0, #35	@ 0x23
 80006aa:	f7ff ff27 	bl	80004fc <MEMS_Write>
 80006ae:	2167      	movs	r1, #103	@ 0x67
 80006b0:	2020      	movs	r0, #32
 80006b2:	f7ff ff23 	bl	80004fc <MEMS_Write>
 80006b6:	2100      	movs	r1, #0
 80006b8:	2024      	movs	r0, #36	@ 0x24
 80006ba:	f7ff ff1f 	bl	80004fc <MEMS_Write>
 80006be:	2155      	movs	r1, #85	@ 0x55
 80006c0:	2057      	movs	r0, #87	@ 0x57
 80006c2:	f7ff ff1b 	bl	80004fc <MEMS_Write>
 80006c6:	2105      	movs	r1, #5
 80006c8:	2040      	movs	r0, #64	@ 0x40
 80006ca:	f7ff ff17 	bl	80004fc <MEMS_Write>
 80006ce:	2111      	movs	r1, #17
 80006d0:	2041      	movs	r0, #65	@ 0x41
 80006d2:	f7ff ff13 	bl	80004fc <MEMS_Write>
 80006d6:	21fc      	movs	r1, #252	@ 0xfc
 80006d8:	2059      	movs	r0, #89	@ 0x59
 80006da:	f7ff ff0f 	bl	80004fc <MEMS_Write>
 80006de:	21fc      	movs	r1, #252	@ 0xfc
 80006e0:	205a      	movs	r0, #90	@ 0x5a
 80006e2:	f7ff ff0b 	bl	80004fc <MEMS_Write>
 80006e6:	2101      	movs	r1, #1
 80006e8:	205b      	movs	r0, #91	@ 0x5b
 80006ea:	f7ff ff07 	bl	80004fc <MEMS_Write>

  xTaskCreate(Green_LED_Task, "Green LED", 1000, NULL, 1, NULL);
 80006ee:	2300      	movs	r3, #0
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	2301      	movs	r3, #1
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006fc:	490a      	ldr	r1, [pc, #40]	@ (8000728 <main+0xb0>)
 80006fe:	480b      	ldr	r0, [pc, #44]	@ (800072c <main+0xb4>)
 8000700:	f002 fe88 	bl	8003414 <xTaskCreate>

  xTaskCreate(vHandlerTask, "Handler Task", 1000, NULL, 4, NULL);
 8000704:	2300      	movs	r3, #0
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	2304      	movs	r3, #4
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2300      	movs	r3, #0
 800070e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000712:	4907      	ldr	r1, [pc, #28]	@ (8000730 <main+0xb8>)
 8000714:	4807      	ldr	r0, [pc, #28]	@ (8000734 <main+0xbc>)
 8000716:	f002 fe7d 	bl	8003414 <xTaskCreate>

  vTaskStartScheduler();
 800071a:	f002 ffbb 	bl	8003694 <vTaskStartScheduler>

  // USER CODE END 2 //

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800071e:	bf00      	nop
 8000720:	e7fd      	b.n	800071e <main+0xa6>
 8000722:	bf00      	nop
 8000724:	20000084 	.word	0x20000084
 8000728:	08005258 	.word	0x08005258
 800072c:	08000549 	.word	0x08000549
 8000730:	08005264 	.word	0x08005264
 8000734:	08000579 	.word	0x08000579

08000738 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	@ 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fd40 	bl	80051cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <SystemClock_Config+0xb4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a21      	ldr	r2, [pc, #132]	@ (80007ec <SystemClock_Config+0xb4>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <SystemClock_Config+0xb4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <SystemClock_Config+0xb8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1b      	ldr	r2, [pc, #108]	@ (80007f0 <SystemClock_Config+0xb8>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <SystemClock_Config+0xb8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fd4d 	bl	8001248 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x80>
    Error_Handler();
 80007b4:	f000 f8e2 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 ffb0 	bl	8001738 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xaa>
    Error_Handler();
 80007de:	f000 f8cd 	bl	800097c <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	@ (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f001 f975 	bl	8001b34 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
    Error_Handler();
 8000850:	f000 f894 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000002c 	.word	0x2000002c
 800085c:	40013000 	.word	0x40013000

08000860 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b34      	ldr	r3, [pc, #208]	@ (800094c <MX_GPIO_Init+0xec>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a33      	ldr	r2, [pc, #204]	@ (800094c <MX_GPIO_Init+0xec>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b31      	ldr	r3, [pc, #196]	@ (800094c <MX_GPIO_Init+0xec>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b2d      	ldr	r3, [pc, #180]	@ (800094c <MX_GPIO_Init+0xec>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a2c      	ldr	r2, [pc, #176]	@ (800094c <MX_GPIO_Init+0xec>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <MX_GPIO_Init+0xec>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <MX_GPIO_Init+0xec>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a25      	ldr	r2, [pc, #148]	@ (800094c <MX_GPIO_Init+0xec>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b23      	ldr	r3, [pc, #140]	@ (800094c <MX_GPIO_Init+0xec>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2108      	movs	r1, #8
 80008ce:	4820      	ldr	r0, [pc, #128]	@ (8000950 <MX_GPIO_Init+0xf0>)
 80008d0:	f000 fc6e 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14,
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80008da:	481e      	ldr	r0, [pc, #120]	@ (8000954 <MX_GPIO_Init+0xf4>)
 80008dc:	f000 fc68 	bl	80011b0 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e0:	2308      	movs	r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4816      	ldr	r0, [pc, #88]	@ (8000950 <MX_GPIO_Init+0xf0>)
 80008f8:	f000 fabe 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 80008fc:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	480f      	ldr	r0, [pc, #60]	@ (8000954 <MX_GPIO_Init+0xf4>)
 8000916:	f000 faaf 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800091a:	2301      	movs	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	4808      	ldr	r0, [pc, #32]	@ (8000950 <MX_GPIO_Init+0xf0>)
 8000930:	f000 faa2 	bl	8000e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2105      	movs	r1, #5
 8000938:	2006      	movs	r0, #6
 800093a:	f000 fa73 	bl	8000e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800093e:	2006      	movs	r0, #6
 8000940:	f000 fa8c 	bl	8000e5c <HAL_NVIC_EnableIRQ>
}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40021000 	.word	0x40021000
 8000954:	40020c00 	.word	0x40020c00

08000958 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d101      	bne.n	800096e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096a:	f000 f983 	bl	8000c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40001400 	.word	0x40001400

0800097c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099c:	6453      	str	r3, [r2, #68]	@ 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <HAL_SPI_MspInit+0x84>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12b      	bne.n	8000a52 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_SPI_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a32:	23e0      	movs	r3, #224	@ 0xe0
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a42:	2305      	movs	r3, #5
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <HAL_SPI_MspInit+0x8c>)
 8000a4e:	f000 fa13 	bl	8000e78 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40013000 	.word	0x40013000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000

08000a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	@ 0x38
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <HAL_InitTick+0xe4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a32      	ldr	r2, [pc, #200]	@ (8000b4c <HAL_InitTick+0xe4>)
 8000a82:	f043 0320 	orr.w	r3, r3, #32
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b30      	ldr	r3, [pc, #192]	@ (8000b4c <HAL_InitTick+0xe4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f003 0320 	and.w	r3, r3, #32
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a94:	f107 0210 	add.w	r2, r7, #16
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 f816 	bl	8001ad0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d103      	bne.n	8000ab6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aae:	f000 fffb 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8000ab2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ab4:	e004      	b.n	8000ac0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ab6:	f000 fff7 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8000aba:	4603      	mov	r3, r0
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ac2:	4a23      	ldr	r2, [pc, #140]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	0c9b      	lsrs	r3, r3, #18
 8000aca:	3b01      	subs	r3, #1
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <HAL_InitTick+0xec>)
 8000ad0:	4a21      	ldr	r2, [pc, #132]	@ (8000b58 <HAL_InitTick+0xf0>)
 8000ad2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <HAL_InitTick+0xec>)
 8000ad6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ada:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000adc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <HAL_InitTick+0xec>)
 8000ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_InitTick+0xec>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <HAL_InitTick+0xec>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_InitTick+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000af4:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <HAL_InitTick+0xec>)
 8000af6:	f001 fac7 	bl	8002088 <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d11b      	bne.n	8000b40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000b08:	4812      	ldr	r0, [pc, #72]	@ (8000b54 <HAL_InitTick+0xec>)
 8000b0a:	f001 fb17 	bl	800213c <HAL_TIM_Base_Start_IT>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d111      	bne.n	8000b40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b1c:	2037      	movs	r0, #55	@ 0x37
 8000b1e:	f000 f99d 	bl	8000e5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d808      	bhi.n	8000b3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	2037      	movs	r0, #55	@ 0x37
 8000b2e:	f000 f979 	bl	8000e24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_InitTick+0xf4>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	e002      	b.n	8000b40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3738      	adds	r7, #56	@ 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	20000088 	.word	0x20000088
 8000b58:	40001400 	.word	0x40001400
 8000b5c:	20000004 	.word	0x20000004

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <NMI_Handler+0x4>

08000b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <MemManage_Handler+0x4>

08000b78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 fb3c 	bl	8001218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <TIM7_IRQHandler+0x10>)
 8000baa:	f001 fb37 	bl	800221c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000088 	.word	0x20000088

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f004 fae7 	bl	80051dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fd33 	bl	8000678 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c20:	080052b4 	.word	0x080052b4
  ldr r2, =_sbss
 8000c24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c28:	20012f3c 	.word	0x20012f3c

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f8d8 	bl	8000e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f7ff ff02 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe90 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200000d0 	.word	0x200000d0

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000d0 	.word	0x200000d0

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	@ (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e36:	f7ff ff61 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f7ff ffb1 	bl	8000da8 <NVIC_EncodePriority>
 8000e46:	4602      	mov	r2, r0
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff54 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e16b      	b.n	800116c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 815a 	bne.w	8001166 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d005      	beq.n	8000eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d130      	bne.n	8000f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	f003 0201 	and.w	r2, r3, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d017      	beq.n	8000f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	69b9      	ldr	r1, [r7, #24]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80b4 	beq.w	8001166 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b60      	ldr	r3, [pc, #384]	@ (8001184 <HAL_GPIO_Init+0x30c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a5f      	ldr	r2, [pc, #380]	@ (8001184 <HAL_GPIO_Init+0x30c>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b5d      	ldr	r3, [pc, #372]	@ (8001184 <HAL_GPIO_Init+0x30c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101a:	4a5b      	ldr	r2, [pc, #364]	@ (8001188 <HAL_GPIO_Init+0x310>)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a52      	ldr	r2, [pc, #328]	@ (800118c <HAL_GPIO_Init+0x314>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d02b      	beq.n	800109e <HAL_GPIO_Init+0x226>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a51      	ldr	r2, [pc, #324]	@ (8001190 <HAL_GPIO_Init+0x318>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d025      	beq.n	800109a <HAL_GPIO_Init+0x222>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a50      	ldr	r2, [pc, #320]	@ (8001194 <HAL_GPIO_Init+0x31c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d01f      	beq.n	8001096 <HAL_GPIO_Init+0x21e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4f      	ldr	r2, [pc, #316]	@ (8001198 <HAL_GPIO_Init+0x320>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0x21a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4e      	ldr	r2, [pc, #312]	@ (800119c <HAL_GPIO_Init+0x324>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0x216>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4d      	ldr	r2, [pc, #308]	@ (80011a0 <HAL_GPIO_Init+0x328>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <HAL_GPIO_Init+0x212>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4c      	ldr	r2, [pc, #304]	@ (80011a4 <HAL_GPIO_Init+0x32c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x20e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4b      	ldr	r2, [pc, #300]	@ (80011a8 <HAL_GPIO_Init+0x330>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_GPIO_Init+0x20a>
 800107e:	2307      	movs	r3, #7
 8001080:	e00e      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 8001082:	2308      	movs	r3, #8
 8001084:	e00c      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 8001086:	2306      	movs	r3, #6
 8001088:	e00a      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 800108a:	2305      	movs	r3, #5
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 800108e:	2304      	movs	r3, #4
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x228>
 800109e:	2300      	movs	r3, #0
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b0:	4935      	ldr	r1, [pc, #212]	@ (8001188 <HAL_GPIO_Init+0x310>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b3b      	ldr	r3, [pc, #236]	@ (80011ac <HAL_GPIO_Init+0x334>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a32      	ldr	r2, [pc, #200]	@ (80011ac <HAL_GPIO_Init+0x334>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <HAL_GPIO_Init+0x334>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a27      	ldr	r2, [pc, #156]	@ (80011ac <HAL_GPIO_Init+0x334>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <HAL_GPIO_Init+0x334>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001136:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <HAL_GPIO_Init+0x334>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <HAL_GPIO_Init+0x334>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <HAL_GPIO_Init+0x334>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3301      	adds	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f ae90 	bls.w	8000e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3724      	adds	r7, #36	@ 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40021400 	.word	0x40021400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40021c00 	.word	0x40021c00
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f4:	887a      	ldrh	r2, [r7, #2]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4013      	ands	r3, r2
 80011fa:	041a      	lsls	r2, r3, #16
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43d9      	mvns	r1, r3
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	400b      	ands	r3, r1
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f9f4 	bl	8000624 <HAL_GPIO_EXTI_Callback>
  }
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e267      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d075      	beq.n	8001352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001266:	4b88      	ldr	r3, [pc, #544]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b04      	cmp	r3, #4
 8001270:	d00c      	beq.n	800128c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4b85      	ldr	r3, [pc, #532]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800127a:	2b08      	cmp	r3, #8
 800127c:	d112      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b82      	ldr	r3, [pc, #520]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800128a:	d10b      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	4b7e      	ldr	r3, [pc, #504]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d05b      	beq.n	8001350 <HAL_RCC_OscConfig+0x108>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d157      	bne.n	8001350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e242      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ac:	d106      	bne.n	80012bc <HAL_RCC_OscConfig+0x74>
 80012ae:	4b76      	ldr	r3, [pc, #472]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a75      	ldr	r2, [pc, #468]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e01d      	b.n	80012f8 <HAL_RCC_OscConfig+0xb0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x98>
 80012c6:	4b70      	ldr	r3, [pc, #448]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6c      	ldr	r2, [pc, #432]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0xb0>
 80012e0:	4b69      	ldr	r3, [pc, #420]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a68      	ldr	r2, [pc, #416]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b66      	ldr	r3, [pc, #408]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a65      	ldr	r2, [pc, #404]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fccc 	bl	8000c9c <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fcc8 	bl	8000c9c <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	@ 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e207      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b5b      	ldr	r3, [pc, #364]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0xc0>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fcb8 	bl	8000c9c <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fcb4 	bl	8000c9c <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	@ 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e1f3      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	4b51      	ldr	r3, [pc, #324]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0xe8>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d063      	beq.n	8001426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800135e:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001372:	2b08      	cmp	r3, #8
 8001374:	d11c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	4b41      	ldr	r3, [pc, #260]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_RCC_OscConfig+0x152>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e1c7      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b3b      	ldr	r3, [pc, #236]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4937      	ldr	r1, [pc, #220]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	e03a      	b.n	8001426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b8:	4b34      	ldr	r3, [pc, #208]	@ (800148c <HAL_RCC_OscConfig+0x244>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fc6d 	bl	8000c9c <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fc69 	bl	8000c9c <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e1a8      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4925      	ldr	r1, [pc, #148]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <HAL_RCC_OscConfig+0x244>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fc4c 	bl	8000c9c <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fc48 	bl	8000c9c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e187      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d036      	beq.n	80014a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d016      	beq.n	8001468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_RCC_OscConfig+0x248>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fc2c 	bl	8000c9c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fc28 	bl	8000c9c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e167      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <HAL_RCC_OscConfig+0x240>)
 800145c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x200>
 8001466:	e01b      	b.n	80014a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_RCC_OscConfig+0x248>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fc15 	bl	8000c9c <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	e00e      	b.n	8001494 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001476:	f7ff fc11 	bl	8000c9c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d907      	bls.n	8001494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e150      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
 8001488:	40023800 	.word	0x40023800
 800148c:	42470000 	.word	0x42470000
 8001490:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001494:	4b88      	ldr	r3, [pc, #544]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1ea      	bne.n	8001476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8097 	beq.w	80015dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b2:	4b81      	ldr	r3, [pc, #516]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10f      	bne.n	80014de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b7d      	ldr	r3, [pc, #500]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	4a7c      	ldr	r2, [pc, #496]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ce:	4b7a      	ldr	r3, [pc, #488]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014da:	2301      	movs	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	4b77      	ldr	r3, [pc, #476]	@ (80016bc <HAL_RCC_OscConfig+0x474>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d118      	bne.n	800151c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ea:	4b74      	ldr	r3, [pc, #464]	@ (80016bc <HAL_RCC_OscConfig+0x474>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a73      	ldr	r2, [pc, #460]	@ (80016bc <HAL_RCC_OscConfig+0x474>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fbd1 	bl	8000c9c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fe:	f7ff fbcd 	bl	8000c9c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e10c      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001510:	4b6a      	ldr	r3, [pc, #424]	@ (80016bc <HAL_RCC_OscConfig+0x474>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x2ea>
 8001524:	4b64      	ldr	r3, [pc, #400]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001528:	4a63      	ldr	r2, [pc, #396]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001530:	e01c      	b.n	800156c <HAL_RCC_OscConfig+0x324>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b05      	cmp	r3, #5
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x30c>
 800153a:	4b5f      	ldr	r3, [pc, #380]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153e:	4a5e      	ldr	r2, [pc, #376]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6713      	str	r3, [r2, #112]	@ 0x70
 8001546:	4b5c      	ldr	r3, [pc, #368]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154a:	4a5b      	ldr	r2, [pc, #364]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6713      	str	r3, [r2, #112]	@ 0x70
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0x324>
 8001554:	4b58      	ldr	r3, [pc, #352]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001558:	4a57      	ldr	r2, [pc, #348]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001560:	4b55      	ldr	r3, [pc, #340]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001564:	4a54      	ldr	r2, [pc, #336]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 0304 	bic.w	r3, r3, #4
 800156a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d015      	beq.n	80015a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fb92 	bl	8000c9c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fb8e 	bl	8000c9c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0cb      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001592:	4b49      	ldr	r3, [pc, #292]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0ee      	beq.n	800157c <HAL_RCC_OscConfig+0x334>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff fb7c 	bl	8000c9c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff fb78 	bl	8000c9c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0b5      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015be:	4b3e      	ldr	r3, [pc, #248]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1ee      	bne.n	80015a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d0:	4b39      	ldr	r3, [pc, #228]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	4a38      	ldr	r2, [pc, #224]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80a1 	beq.w	8001728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e6:	4b34      	ldr	r3, [pc, #208]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d05c      	beq.n	80016ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d141      	bne.n	800167e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b31      	ldr	r3, [pc, #196]	@ (80016c0 <HAL_RCC_OscConfig+0x478>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fb4c 	bl	8000c9c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fb48 	bl	8000c9c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e087      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	019b      	lsls	r3, r3, #6
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	085b      	lsrs	r3, r3, #1
 800163e:	3b01      	subs	r3, #1
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001648:	061b      	lsls	r3, r3, #24
 800164a:	491b      	ldr	r1, [pc, #108]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <HAL_RCC_OscConfig+0x478>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fb21 	bl	8000c9c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff fb1d 	bl	8000c9c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e05c      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x416>
 800167c:	e054      	b.n	8001728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <HAL_RCC_OscConfig+0x478>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fb0a 	bl	8000c9c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff fb06 	bl	8000c9c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e045      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_RCC_OscConfig+0x470>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x444>
 80016aa:	e03d      	b.n	8001728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e038      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000
 80016c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_RCC_OscConfig+0x4ec>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d028      	beq.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d121      	bne.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d11a      	bne.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016f4:	4013      	ands	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d111      	bne.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	3b01      	subs	r3, #1
 800170e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0cc      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b68      	ldr	r3, [pc, #416]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d90c      	bls.n	8001774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b65      	ldr	r3, [pc, #404]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b63      	ldr	r3, [pc, #396]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0b8      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800178c:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a58      	ldr	r2, [pc, #352]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001796:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a4:	4b53      	ldr	r3, [pc, #332]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a52      	ldr	r2, [pc, #328]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b0:	4b50      	ldr	r3, [pc, #320]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	494d      	ldr	r1, [pc, #308]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d044      	beq.n	8001858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b47      	ldr	r3, [pc, #284]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d119      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e07f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4b3f      	ldr	r3, [pc, #252]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	4b3b      	ldr	r3, [pc, #236]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e067      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001816:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f023 0203 	bic.w	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4934      	ldr	r1, [pc, #208]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001828:	f7ff fa38 	bl	8000c9c <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff fa34 	bl	8000c9c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e04f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 020c 	and.w	r2, r3, #12
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	429a      	cmp	r2, r3
 8001856:	d1eb      	bne.n	8001830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001858:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d20c      	bcs.n	8001880 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e032      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4916      	ldr	r1, [pc, #88]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	490e      	ldr	r1, [pc, #56]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018be:	f000 f821 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	490a      	ldr	r1, [pc, #40]	@ (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	5ccb      	ldrb	r3, [r1, r3]
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	4a09      	ldr	r2, [pc, #36]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f8c2 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00
 80018f4:	40023800 	.word	0x40023800
 80018f8:	0800528c 	.word	0x0800528c
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001908:	b090      	sub	sp, #64	@ 0x40
 800190a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191c:	4b59      	ldr	r3, [pc, #356]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d00d      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x40>
 8001928:	2b08      	cmp	r3, #8
 800192a:	f200 80a1 	bhi.w	8001a70 <HAL_RCC_GetSysClockFreq+0x16c>
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x34>
 8001932:	2b04      	cmp	r3, #4
 8001934:	d003      	beq.n	800193e <HAL_RCC_GetSysClockFreq+0x3a>
 8001936:	e09b      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x184>)
 800193a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800193c:	e09b      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193e:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8001940:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001942:	e098      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001944:	4b4f      	ldr	r3, [pc, #316]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800194c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d028      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	2200      	movs	r2, #0
 8001962:	623b      	str	r3, [r7, #32]
 8001964:	627a      	str	r2, [r7, #36]	@ 0x24
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800196c:	2100      	movs	r1, #0
 800196e:	4b47      	ldr	r3, [pc, #284]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8001970:	fb03 f201 	mul.w	r2, r3, r1
 8001974:	2300      	movs	r3, #0
 8001976:	fb00 f303 	mul.w	r3, r0, r3
 800197a:	4413      	add	r3, r2
 800197c:	4a43      	ldr	r2, [pc, #268]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x188>)
 800197e:	fba0 1202 	umull	r1, r2, r0, r2
 8001982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001984:	460a      	mov	r2, r1
 8001986:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800198a:	4413      	add	r3, r2
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800198e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001990:	2200      	movs	r2, #0
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	61fa      	str	r2, [r7, #28]
 8001996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800199a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800199e:	f7fe fc17 	bl	80001d0 <__aeabi_uldivmod>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4613      	mov	r3, r2
 80019a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019aa:	e053      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ac:	4b35      	ldr	r3, [pc, #212]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	099b      	lsrs	r3, r3, #6
 80019b2:	2200      	movs	r2, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	617a      	str	r2, [r7, #20]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019be:	f04f 0b00 	mov.w	fp, #0
 80019c2:	4652      	mov	r2, sl
 80019c4:	465b      	mov	r3, fp
 80019c6:	f04f 0000 	mov.w	r0, #0
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	0159      	lsls	r1, r3, #5
 80019d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d4:	0150      	lsls	r0, r2, #5
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	ebb2 080a 	subs.w	r8, r2, sl
 80019de:	eb63 090b 	sbc.w	r9, r3, fp
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019f6:	ebb2 0408 	subs.w	r4, r2, r8
 80019fa:	eb63 0509 	sbc.w	r5, r3, r9
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	00eb      	lsls	r3, r5, #3
 8001a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a0c:	00e2      	lsls	r2, r4, #3
 8001a0e:	4614      	mov	r4, r2
 8001a10:	461d      	mov	r5, r3
 8001a12:	eb14 030a 	adds.w	r3, r4, sl
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	eb45 030b 	adc.w	r3, r5, fp
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	028b      	lsls	r3, r1, #10
 8001a2e:	4621      	mov	r1, r4
 8001a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a34:	4621      	mov	r1, r4
 8001a36:	028a      	lsls	r2, r1, #10
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	60fa      	str	r2, [r7, #12]
 8001a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a48:	f7fe fbc2 	bl	80001d0 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a6e:	e002      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3740      	adds	r7, #64	@ 0x40
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	017d7840 	.word	0x017d7840

08001a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000

08001aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aac:	f7ff fff0 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0a9b      	lsrs	r3, r3, #10
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	@ (8001acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	0800529c 	.word	0x0800529c

08001ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	220f      	movs	r2, #15
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <HAL_RCC_GetClockConfig+0x60>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0207 	and.w	r2, r3, #7
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07b      	b.n	8001c3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b56:	d009      	beq.n	8001b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
 8001b5e:	e005      	b.n	8001b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe ff26 	bl	80009d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ba2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf0:	ea42 0103 	orr.w	r1, r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	f003 0104 	and.w	r1, r3, #4
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f003 0210 	and.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69da      	ldr	r2, [r3, #28]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b088      	sub	sp, #32
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c56:	f7ff f821 	bl	8000c9c <HAL_GetTick>
 8001c5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e12a      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_SPI_Transmit+0x36>
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e122      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_SPI_Transmit+0x48>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e11b      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	88fa      	ldrh	r2, [r7, #6]
 8001cb4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cdc:	d10f      	bne.n	8001cfe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b40      	cmp	r3, #64	@ 0x40
 8001d0a:	d007      	beq.n	8001d1c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d24:	d152      	bne.n	8001dcc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_SPI_Transmit+0xee>
 8001d2e:	8b7b      	ldrh	r3, [r7, #26]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d145      	bne.n	8001dc0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	881a      	ldrh	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	1c9a      	adds	r2, r3, #2
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d58:	e032      	b.n	8001dc0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d112      	bne.n	8001d8e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	1c9a      	adds	r2, r3, #2
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001d8c:	e018      	b.n	8001dc0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d8e:	f7fe ff85 	bl	8000c9c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d803      	bhi.n	8001da6 <HAL_SPI_Transmit+0x160>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d102      	bne.n	8001dac <HAL_SPI_Transmit+0x166>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e082      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1c7      	bne.n	8001d5a <HAL_SPI_Transmit+0x114>
 8001dca:	e053      	b.n	8001e74 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_SPI_Transmit+0x194>
 8001dd4:	8b7b      	ldrh	r3, [r7, #26]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d147      	bne.n	8001e6a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	330c      	adds	r3, #12
 8001de4:	7812      	ldrb	r2, [r2, #0]
 8001de6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e00:	e033      	b.n	8001e6a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d113      	bne.n	8001e38 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	7812      	ldrb	r2, [r2, #0]
 8001e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e36:	e018      	b.n	8001e6a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e38:	f7fe ff30 	bl	8000c9c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d803      	bhi.n	8001e50 <HAL_SPI_Transmit+0x20a>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4e:	d102      	bne.n	8001e56 <HAL_SPI_Transmit+0x210>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e02d      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1c6      	bne.n	8001e02 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	6839      	ldr	r1, [r7, #0]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f8b1 	bl	8001fe0 <SPI_EndRxTxTransaction>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ee0:	f7fe fedc 	bl	8000c9c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ef0:	f7fe fed4 	bl	8000c9c <HAL_GetTick>
 8001ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ef6:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	015b      	lsls	r3, r3, #5
 8001efc:	0d1b      	lsrs	r3, r3, #20
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f06:	e054      	b.n	8001fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0e:	d050      	beq.n	8001fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f10:	f7fe fec4 	bl	8000c9c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d902      	bls.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d13d      	bne.n	8001fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f3e:	d111      	bne.n	8001f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f48:	d004      	beq.n	8001f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f52:	d107      	bne.n	8001f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f6c:	d10f      	bne.n	8001f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e017      	b.n	8001fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d19b      	bne.n	8001f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7ff ff6a 	bl	8001ed0 <SPI_WaitFlagStateUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e032      	b.n	8002078 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002012:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <SPI_EndRxTxTransaction+0xa0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1b      	ldr	r2, [pc, #108]	@ (8002084 <SPI_EndRxTxTransaction+0xa4>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	0d5b      	lsrs	r3, r3, #21
 800201e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002030:	d112      	bne.n	8002058 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	2180      	movs	r1, #128	@ 0x80
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff ff47 	bl	8001ed0 <SPI_WaitFlagStateUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d016      	beq.n	8002076 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e00f      	b.n	8002078 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3b01      	subs	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206e:	2b80      	cmp	r3, #128	@ 0x80
 8002070:	d0f2      	beq.n	8002058 <SPI_EndRxTxTransaction+0x78>
 8002072:	e000      	b.n	8002076 <SPI_EndRxTxTransaction+0x96>
        break;
 8002074:	bf00      	nop
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000000 	.word	0x20000000
 8002084:	165e9f81 	.word	0x165e9f81

08002088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e041      	b.n	800211e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f839 	bl	8002126 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f000 f9c0 	bl	800244c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d001      	beq.n	8002154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e04e      	b.n	80021f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <HAL_TIM_Base_Start_IT+0xc4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d022      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x80>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217e:	d01d      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x80>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1f      	ldr	r2, [pc, #124]	@ (8002204 <HAL_TIM_Base_Start_IT+0xc8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d018      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x80>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1e      	ldr	r2, [pc, #120]	@ (8002208 <HAL_TIM_Base_Start_IT+0xcc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d013      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x80>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1c      	ldr	r2, [pc, #112]	@ (800220c <HAL_TIM_Base_Start_IT+0xd0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00e      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x80>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002210 <HAL_TIM_Base_Start_IT+0xd4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x80>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a19      	ldr	r2, [pc, #100]	@ (8002214 <HAL_TIM_Base_Start_IT+0xd8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x80>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a18      	ldr	r2, [pc, #96]	@ (8002218 <HAL_TIM_Base_Start_IT+0xdc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d111      	bne.n	80021e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d010      	beq.n	80021f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021de:	e007      	b.n	80021f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800
 800220c:	40000c00 	.word	0x40000c00
 8002210:	40010400 	.word	0x40010400
 8002214:	40014000 	.word	0x40014000
 8002218:	40001800 	.word	0x40001800

0800221c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d020      	beq.n	8002280 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0202 	mvn.w	r2, #2
 8002250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f8d2 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f8c4 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f8d5 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d020      	beq.n	80022cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0204 	mvn.w	r2, #4
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8ac 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f89e 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f8af 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d020      	beq.n	8002318 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0208 	mvn.w	r2, #8
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2204      	movs	r2, #4
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f886 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f878 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f889 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d020      	beq.n	8002364 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0210 	mvn.w	r2, #16
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2208      	movs	r2, #8
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f860 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f852 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f863 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0201 	mvn.w	r2, #1
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fae8 	bl	8000958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f906 	bl	80025b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00c      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f834 	bl	8002438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0220 	mvn.w	r2, #32
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8d8 	bl	80025a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a46      	ldr	r2, [pc, #280]	@ (8002578 <TIM_Base_SetConfig+0x12c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246a:	d00f      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a43      	ldr	r2, [pc, #268]	@ (800257c <TIM_Base_SetConfig+0x130>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00b      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a42      	ldr	r2, [pc, #264]	@ (8002580 <TIM_Base_SetConfig+0x134>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a41      	ldr	r2, [pc, #260]	@ (8002584 <TIM_Base_SetConfig+0x138>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d003      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a40      	ldr	r2, [pc, #256]	@ (8002588 <TIM_Base_SetConfig+0x13c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d108      	bne.n	800249e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a35      	ldr	r2, [pc, #212]	@ (8002578 <TIM_Base_SetConfig+0x12c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d02b      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ac:	d027      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a32      	ldr	r2, [pc, #200]	@ (800257c <TIM_Base_SetConfig+0x130>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d023      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a31      	ldr	r2, [pc, #196]	@ (8002580 <TIM_Base_SetConfig+0x134>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01f      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a30      	ldr	r2, [pc, #192]	@ (8002584 <TIM_Base_SetConfig+0x138>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01b      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002588 <TIM_Base_SetConfig+0x13c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d017      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a2e      	ldr	r2, [pc, #184]	@ (800258c <TIM_Base_SetConfig+0x140>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002590 <TIM_Base_SetConfig+0x144>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00f      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002594 <TIM_Base_SetConfig+0x148>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00b      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002598 <TIM_Base_SetConfig+0x14c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a2a      	ldr	r2, [pc, #168]	@ (800259c <TIM_Base_SetConfig+0x150>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d003      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a29      	ldr	r2, [pc, #164]	@ (80025a0 <TIM_Base_SetConfig+0x154>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d108      	bne.n	8002510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a10      	ldr	r2, [pc, #64]	@ (8002578 <TIM_Base_SetConfig+0x12c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d003      	beq.n	8002544 <TIM_Base_SetConfig+0xf8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <TIM_Base_SetConfig+0x13c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d103      	bne.n	800254c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f023 0201 	bic.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	611a      	str	r2, [r3, #16]
  }
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40010000 	.word	0x40010000
 800257c:	40000400 	.word	0x40000400
 8002580:	40000800 	.word	0x40000800
 8002584:	40000c00 	.word	0x40000c00
 8002588:	40010400 	.word	0x40010400
 800258c:	40014000 	.word	0x40014000
 8002590:	40014400 	.word	0x40014400
 8002594:	40014800 	.word	0x40014800
 8002598:	40001800 	.word	0x40001800
 800259c:	40001c00 	.word	0x40001c00
 80025a0:	40002000 	.word	0x40002000

080025a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f103 0208 	add.w	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f103 0208 	add.w	r2, r3, #8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f103 0208 	add.w	r2, r3, #8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d103      	bne.n	800268e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e00c      	b.n	80026a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3308      	adds	r3, #8
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e002      	b.n	800269c <vListInsert+0x2e>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d2f6      	bcs.n	8002696 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6892      	ldr	r2, [r2, #8]
 80026f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6852      	ldr	r2, [r2, #4]
 8002700:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	d103      	bne.n	8002714 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	1e5a      	subs	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002760:	f002 fa32 	bl	8004bc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276c:	68f9      	ldr	r1, [r7, #12]
 800276e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	441a      	add	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	3b01      	subs	r3, #1
 8002792:	68f9      	ldr	r1, [r7, #12]
 8002794:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	441a      	add	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	22ff      	movs	r2, #255	@ 0xff
 80027a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	22ff      	movs	r2, #255	@ 0xff
 80027ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d114      	bne.n	80027e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01a      	beq.n	80027f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3310      	adds	r3, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 f9d8 	bl	8003b78 <xTaskRemoveFromEventList>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <xQueueGenericReset+0xd0>)
 80027d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	e009      	b.n	80027f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3310      	adds	r3, #16
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fef1 	bl	80025cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3324      	adds	r3, #36	@ 0x24
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff feec 	bl	80025cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027f4:	f002 fa1a 	bl	8004c2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000ed04 	.word	0xe000ed04

08002808 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	4613      	mov	r3, r2
 8002814:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10b      	bne.n	8002834 <xQueueGenericCreate+0x2c>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	613b      	str	r3, [r7, #16]
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	e004      	b.n	800284a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3350      	adds	r3, #80	@ 0x50
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fadc 	bl	8004e0c <pvPortMalloc>
 8002854:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00d      	beq.n	8002878 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3350      	adds	r3, #80	@ 0x50
 8002864:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002866:	79fa      	ldrb	r2, [r7, #7]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f805 	bl	8002882 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002878:	69bb      	ldr	r3, [r7, #24]
	}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d103      	bne.n	800289e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e002      	b.n	80028a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028b0:	2101      	movs	r1, #1
 80028b2:	69b8      	ldr	r0, [r7, #24]
 80028b4:	f7ff ff3e 	bl	8002734 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08e      	sub	sp, #56	@ 0x38
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80028de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <xQueueGenericSend+0x34>
	__asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <xQueueGenericSend+0x42>
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <xQueueGenericSend+0x46>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <xQueueGenericSend+0x48>
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <xQueueGenericSend+0x64>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002926:	bf00      	nop
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d103      	bne.n	800293a <xQueueGenericSend+0x72>
 8002932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <xQueueGenericSend+0x76>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <xQueueGenericSend+0x78>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <xQueueGenericSend+0x94>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	623b      	str	r3, [r7, #32]
}
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800295c:	f001 faac 	bl	8003eb8 <xTaskGetSchedulerState>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <xQueueGenericSend+0xa4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <xQueueGenericSend+0xa8>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <xQueueGenericSend+0xaa>
 8002970:	2300      	movs	r3, #0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10b      	bne.n	800298e <xQueueGenericSend+0xc6>
	__asm volatile
 8002976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800297a:	f383 8811 	msr	BASEPRI, r3
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	61fb      	str	r3, [r7, #28]
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	e7fd      	b.n	800298a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800298e:	f002 f91b 	bl	8004bc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <xQueueGenericSend+0xdc>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d129      	bne.n	80029f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029aa:	f000 fbc5 	bl	8003138 <prvCopyDataToQueue>
 80029ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d010      	beq.n	80029da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	3324      	adds	r3, #36	@ 0x24
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 f8db 	bl	8003b78 <xTaskRemoveFromEventList>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029c8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac8 <xQueueGenericSend+0x200>)
 80029ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	e00a      	b.n	80029f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029e0:	4b39      	ldr	r3, [pc, #228]	@ (8002ac8 <xQueueGenericSend+0x200>)
 80029e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029f0:	f002 f91c 	bl	8004c2c <vPortExitCritical>
				return pdPASS;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e063      	b.n	8002ac0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029fe:	f002 f915 	bl	8004c2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e05c      	b.n	8002ac0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d106      	bne.n	8002a1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 f915 	bl	8003c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a16:	2301      	movs	r3, #1
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a1a:	f002 f907 	bl	8004c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a1e:	f000 fe87 	bl	8003730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a22:	f002 f8d1 	bl	8004bc8 <vPortEnterCritical>
 8002a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d103      	bne.n	8002a3c <xQueueGenericSend+0x174>
 8002a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a42:	b25b      	sxtb	r3, r3
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d103      	bne.n	8002a52 <xQueueGenericSend+0x18a>
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a52:	f002 f8eb 	bl	8004c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a56:	1d3a      	adds	r2, r7, #4
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 f904 	bl	8003c6c <xTaskCheckForTimeOut>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d124      	bne.n	8002ab4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a6c:	f000 fc5c 	bl	8003328 <prvIsQueueFull>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d018      	beq.n	8002aa8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a78:	3310      	adds	r3, #16
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 f828 	bl	8003ad4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a86:	f000 fbe7 	bl	8003258 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a8a:	f000 fe5f 	bl	800374c <xTaskResumeAll>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f af7c 	bne.w	800298e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <xQueueGenericSend+0x200>)
 8002a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	e772      	b.n	800298e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002aaa:	f000 fbd5 	bl	8003258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002aae:	f000 fe4d 	bl	800374c <xTaskResumeAll>
 8002ab2:	e76c      	b.n	800298e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ab6:	f000 fbcf 	bl	8003258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aba:	f000 fe47 	bl	800374c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002abe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3738      	adds	r7, #56	@ 0x38
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	e000ed04 	.word	0xe000ed04

08002acc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08e      	sub	sp, #56	@ 0x38
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <xQueueGenericSendFromISR+0x3e>
 8002b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <xQueueGenericSendFromISR+0x42>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <xQueueGenericSendFromISR+0x44>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	623b      	str	r3, [r7, #32]
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d103      	bne.n	8002b3a <xQueueGenericSendFromISR+0x6e>
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <xQueueGenericSendFromISR+0x72>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <xQueueGenericSendFromISR+0x74>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	61fb      	str	r3, [r7, #28]
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b5c:	f002 f914 	bl	8004d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b60:	f3ef 8211 	mrs	r2, BASEPRI
 8002b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61ba      	str	r2, [r7, #24]
 8002b76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d302      	bcc.n	8002b8e <xQueueGenericSendFromISR+0xc2>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d12c      	bne.n	8002be8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b9e:	f000 facb 	bl	8003138 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ba2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d112      	bne.n	8002bd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d016      	beq.n	8002be2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	3324      	adds	r3, #36	@ 0x24
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 ffdd 	bl	8003b78 <xTaskRemoveFromEventList>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e007      	b.n	8002be2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	b25a      	sxtb	r2, r3
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002be2:	2301      	movs	r3, #1
 8002be4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002be6:	e001      	b.n	8002bec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002bf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3738      	adds	r7, #56	@ 0x38
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08e      	sub	sp, #56	@ 0x38
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	623b      	str	r3, [r7, #32]
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	e7fd      	b.n	8002c2a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	61fb      	str	r3, [r7, #28]
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <xQueueGiveFromISR+0x5c>
 8002c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <xQueueGiveFromISR+0x60>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <xQueueGiveFromISR+0x62>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	61bb      	str	r3, [r7, #24]
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c80:	f002 f882 	bl	8004d88 <vPortValidateInterruptPriority>
	__asm volatile
 8002c84:	f3ef 8211 	mrs	r2, BASEPRI
 8002c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	617a      	str	r2, [r7, #20]
 8002c9a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002c9c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d22b      	bcs.n	8002d08 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d112      	bne.n	8002cf2 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	3324      	adds	r3, #36	@ 0x24
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 ff4d 	bl	8003b78 <xTaskRemoveFromEventList>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00e      	beq.n	8002d02 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e007      	b.n	8002d02 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	b25a      	sxtb	r2, r3
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002d02:	2301      	movs	r3, #1
 8002d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d06:	e001      	b.n	8002d0c <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f383 8811 	msr	BASEPRI, r3
}
 8002d16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3738      	adds	r7, #56	@ 0x38
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	@ 0x30
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <xQueueReceive+0x32>
	__asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	623b      	str	r3, [r7, #32]
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	e7fd      	b.n	8002d52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <xQueueReceive+0x40>
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <xQueueReceive+0x44>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <xQueueReceive+0x46>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10b      	bne.n	8002d86 <xQueueReceive+0x62>
	__asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	61fb      	str	r3, [r7, #28]
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	e7fd      	b.n	8002d82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d86:	f001 f897 	bl	8003eb8 <xTaskGetSchedulerState>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <xQueueReceive+0x72>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <xQueueReceive+0x76>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <xQueueReceive+0x78>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <xQueueReceive+0x94>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	61bb      	str	r3, [r7, #24]
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002db8:	f001 ff06 	bl	8004bc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01f      	beq.n	8002e08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dcc:	f000 fa1e 	bl	800320c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	1e5a      	subs	r2, r3, #1
 8002dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00f      	beq.n	8002e00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de2:	3310      	adds	r3, #16
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fec7 	bl	8003b78 <xTaskRemoveFromEventList>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002df0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee4 <xQueueReceive+0x1c0>)
 8002df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e00:	f001 ff14 	bl	8004c2c <vPortExitCritical>
				return pdPASS;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e069      	b.n	8002edc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e0e:	f001 ff0d 	bl	8004c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e062      	b.n	8002edc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e1c:	f107 0310 	add.w	r3, r7, #16
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 ff0d 	bl	8003c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e2a:	f001 feff 	bl	8004c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e2e:	f000 fc7f 	bl	8003730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e32:	f001 fec9 	bl	8004bc8 <vPortEnterCritical>
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e3c:	b25b      	sxtb	r3, r3
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d103      	bne.n	8002e4c <xQueueReceive+0x128>
 8002e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d103      	bne.n	8002e62 <xQueueReceive+0x13e>
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e62:	f001 fee3 	bl	8004c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e66:	1d3a      	adds	r2, r7, #4
 8002e68:	f107 0310 	add.w	r3, r7, #16
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fefc 	bl	8003c6c <xTaskCheckForTimeOut>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d123      	bne.n	8002ec2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e7c:	f000 fa3e 	bl	80032fc <prvIsQueueEmpty>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d017      	beq.n	8002eb6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e88:	3324      	adds	r3, #36	@ 0x24
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fe20 	bl	8003ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e96:	f000 f9df 	bl	8003258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e9a:	f000 fc57 	bl	800374c <xTaskResumeAll>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d189      	bne.n	8002db8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <xQueueReceive+0x1c0>)
 8002ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	e780      	b.n	8002db8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002eb8:	f000 f9ce 	bl	8003258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ebc:	f000 fc46 	bl	800374c <xTaskResumeAll>
 8002ec0:	e77a      	b.n	8002db8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ec4:	f000 f9c8 	bl	8003258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ec8:	f000 fc40 	bl	800374c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ecc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ece:	f000 fa15 	bl	80032fc <prvIsQueueEmpty>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f43f af6f 	beq.w	8002db8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002eda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3730      	adds	r7, #48	@ 0x30
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	@ 0x38
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	623b      	str	r3, [r7, #32]
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	61fb      	str	r3, [r7, #28]
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f3c:	f000 ffbc 	bl	8003eb8 <xTaskGetSchedulerState>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <xQueueSemaphoreTake+0x64>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <xQueueSemaphoreTake+0x68>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <xQueueSemaphoreTake+0x6a>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10b      	bne.n	8002f6e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	61bb      	str	r3, [r7, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	e7fd      	b.n	8002f6a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f6e:	f001 fe2b 	bl	8004bc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d024      	beq.n	8002fc8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f80:	1e5a      	subs	r2, r3, #1
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d104      	bne.n	8002f98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002f8e:	f001 f955 	bl	800423c <pvTaskIncrementMutexHeldCount>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00f      	beq.n	8002fc0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	3310      	adds	r3, #16
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fde7 	bl	8003b78 <xTaskRemoveFromEventList>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fb0:	4b54      	ldr	r3, [pc, #336]	@ (8003104 <xQueueSemaphoreTake+0x21c>)
 8002fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fc0:	f001 fe34 	bl	8004c2c <vPortExitCritical>
				return pdPASS;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e098      	b.n	80030fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d112      	bne.n	8002ff4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	617b      	str	r3, [r7, #20]
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002fec:	f001 fe1e 	bl	8004c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e082      	b.n	80030fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fe1e 	bl	8003c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003004:	2301      	movs	r3, #1
 8003006:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003008:	f001 fe10 	bl	8004c2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800300c:	f000 fb90 	bl	8003730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003010:	f001 fdda 	bl	8004bc8 <vPortEnterCritical>
 8003014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003016:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800301a:	b25b      	sxtb	r3, r3
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d103      	bne.n	800302a <xQueueSemaphoreTake+0x142>
 8003022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800302a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003030:	b25b      	sxtb	r3, r3
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d103      	bne.n	8003040 <xQueueSemaphoreTake+0x158>
 8003038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003040:	f001 fdf4 	bl	8004c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003044:	463a      	mov	r2, r7
 8003046:	f107 030c 	add.w	r3, r7, #12
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fe0d 	bl	8003c6c <xTaskCheckForTimeOut>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d132      	bne.n	80030be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003058:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800305a:	f000 f94f 	bl	80032fc <prvIsQueueEmpty>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d026      	beq.n	80030b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800306c:	f001 fdac 	bl	8004bc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 ff3d 	bl	8003ef4 <xTaskPriorityInherit>
 800307a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800307c:	f001 fdd6 	bl	8004c2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	3324      	adds	r3, #36	@ 0x24
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fd23 	bl	8003ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800308e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003090:	f000 f8e2 	bl	8003258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003094:	f000 fb5a 	bl	800374c <xTaskResumeAll>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	f47f af67 	bne.w	8002f6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80030a0:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <xQueueSemaphoreTake+0x21c>)
 80030a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	e75d      	b.n	8002f6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80030b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030b4:	f000 f8d0 	bl	8003258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030b8:	f000 fb48 	bl	800374c <xTaskResumeAll>
 80030bc:	e757      	b.n	8002f6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80030be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030c0:	f000 f8ca 	bl	8003258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030c4:	f000 fb42 	bl	800374c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030ca:	f000 f917 	bl	80032fc <prvIsQueueEmpty>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f43f af4c 	beq.w	8002f6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80030d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80030dc:	f001 fd74 	bl	8004bc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80030e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030e2:	f000 f811 	bl	8003108 <prvGetDisinheritPriorityAfterTimeout>
 80030e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80030e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 f808 	bl	8004104 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80030f4:	f001 fd9a 	bl	8004c2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3738      	adds	r7, #56	@ 0x38
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1c3 030f 	rsb	r3, r3, #15
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e001      	b.n	800312a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800312a:	68fb      	ldr	r3, [r7, #12]
	}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10d      	bne.n	8003172 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d14d      	bne.n	80031fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 ff46 	bl	8003ff4 <xTaskPriorityDisinherit>
 8003168:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	e043      	b.n	80031fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d119      	bne.n	80031ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6858      	ldr	r0, [r3, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	461a      	mov	r2, r3
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	f002 f84e 	bl	8005224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	441a      	add	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d32b      	bcc.n	80031fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	e026      	b.n	80031fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68d8      	ldr	r0, [r3, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	461a      	mov	r2, r3
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	f002 f834 	bl	8005224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	425b      	negs	r3, r3
 80031c6:	441a      	add	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d207      	bcs.n	80031e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	425b      	negs	r3, r3
 80031e2:	441a      	add	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d105      	bne.n	80031fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003202:	697b      	ldr	r3, [r7, #20]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d018      	beq.n	8003250 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	441a      	add	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	429a      	cmp	r2, r3
 8003236:	d303      	bcc.n	8003240 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68d9      	ldr	r1, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	461a      	mov	r2, r3
 800324a:	6838      	ldr	r0, [r7, #0]
 800324c:	f001 ffea 	bl	8005224 <memcpy>
	}
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003260:	f001 fcb2 	bl	8004bc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800326a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800326c:	e011      	b.n	8003292 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	d012      	beq.n	800329c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3324      	adds	r3, #36	@ 0x24
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fc7c 	bl	8003b78 <xTaskRemoveFromEventList>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003286:	f000 fd55 	bl	8003d34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	3b01      	subs	r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	dce9      	bgt.n	800326e <prvUnlockQueue+0x16>
 800329a:	e000      	b.n	800329e <prvUnlockQueue+0x46>
					break;
 800329c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	22ff      	movs	r2, #255	@ 0xff
 80032a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80032a6:	f001 fcc1 	bl	8004c2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032aa:	f001 fc8d 	bl	8004bc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032b6:	e011      	b.n	80032dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3310      	adds	r3, #16
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fc57 	bl	8003b78 <xTaskRemoveFromEventList>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032d0:	f000 fd30 	bl	8003d34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032d4:	7bbb      	ldrb	r3, [r7, #14]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	dce9      	bgt.n	80032b8 <prvUnlockQueue+0x60>
 80032e4:	e000      	b.n	80032e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	22ff      	movs	r2, #255	@ 0xff
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80032f0:	f001 fc9c 	bl	8004c2c <vPortExitCritical>
}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003304:	f001 fc60 	bl	8004bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003310:	2301      	movs	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e001      	b.n	800331a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800331a:	f001 fc87 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003330:	f001 fc4a 	bl	8004bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	429a      	cmp	r2, r3
 800333e:	d102      	bne.n	8003346 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003340:	2301      	movs	r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e001      	b.n	800334a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800334a:	f001 fc6f 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 800334e:	68fb      	ldr	r3, [r7, #12]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e014      	b.n	8003392 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003368:	4a0f      	ldr	r2, [pc, #60]	@ (80033a8 <vQueueAddToRegistry+0x50>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10b      	bne.n	800338c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003374:	490c      	ldr	r1, [pc, #48]	@ (80033a8 <vQueueAddToRegistry+0x50>)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800337e:	4a0a      	ldr	r2, [pc, #40]	@ (80033a8 <vQueueAddToRegistry+0x50>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800338a:	e006      	b.n	800339a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3301      	adds	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b07      	cmp	r3, #7
 8003396:	d9e7      	bls.n	8003368 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	200000d4 	.word	0x200000d4

080033ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033bc:	f001 fc04 	bl	8004bc8 <vPortEnterCritical>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033c6:	b25b      	sxtb	r3, r3
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d103      	bne.n	80033d6 <vQueueWaitForMessageRestricted+0x2a>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033dc:	b25b      	sxtb	r3, r3
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d103      	bne.n	80033ec <vQueueWaitForMessageRestricted+0x40>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033ec:	f001 fc1e 	bl	8004c2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3324      	adds	r3, #36	@ 0x24
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fb8d 	bl	8003b20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003406:	6978      	ldr	r0, [r7, #20]
 8003408:	f7ff ff26 	bl	8003258 <prvUnlockQueue>
	}
 800340c:	bf00      	nop
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	@ 0x30
 8003418:	af04      	add	r7, sp, #16
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4618      	mov	r0, r3
 800342a:	f001 fcef 	bl	8004e0c <pvPortMalloc>
 800342e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00e      	beq.n	8003454 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003436:	2058      	movs	r0, #88	@ 0x58
 8003438:	f001 fce8 	bl	8004e0c <pvPortMalloc>
 800343c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	631a      	str	r2, [r3, #48]	@ 0x30
 800344a:	e005      	b.n	8003458 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800344c:	6978      	ldr	r0, [r7, #20]
 800344e:	f001 fda5 	bl	8004f9c <vPortFree>
 8003452:	e001      	b.n	8003458 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d013      	beq.n	8003486 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	2300      	movs	r3, #0
 8003462:	9303      	str	r3, [sp, #12]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	9302      	str	r3, [sp, #8]
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f80e 	bl	8003496 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800347a:	69f8      	ldr	r0, [r7, #28]
 800347c:	f000 f89c 	bl	80035b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003480:	2301      	movs	r3, #1
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	e002      	b.n	800348c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800348c:	69bb      	ldr	r3, [r7, #24]
	}
 800348e:	4618      	mov	r0, r3
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b088      	sub	sp, #32
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	461a      	mov	r2, r3
 80034ae:	21a5      	movs	r1, #165	@ 0xa5
 80034b0:	f001 fe8c 	bl	80051cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034be:	3b01      	subs	r3, #1
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f023 0307 	bic.w	r3, r3, #7
 80034cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	617b      	str	r3, [r7, #20]
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01f      	beq.n	8003536 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	e012      	b.n	8003522 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	7819      	ldrb	r1, [r3, #0]
 8003504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	3334      	adds	r3, #52	@ 0x34
 800350c:	460a      	mov	r2, r1
 800350e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d006      	beq.n	800352a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	3301      	adds	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2b09      	cmp	r3, #9
 8003526:	d9e9      	bls.n	80034fc <prvInitialiseNewTask+0x66>
 8003528:	e000      	b.n	800352c <prvInitialiseNewTask+0x96>
			{
				break;
 800352a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003534:	e003      	b.n	800353e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	2b0e      	cmp	r3, #14
 8003542:	d901      	bls.n	8003548 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003544:	230e      	movs	r3, #14
 8003546:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800354c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003552:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	2200      	movs	r2, #0
 8003558:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	3304      	adds	r3, #4
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f854 	bl	800260c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	3318      	adds	r3, #24
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff f84f 	bl	800260c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003572:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	f1c3 020f 	rsb	r2, r3, #15
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003582:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	2200      	movs	r2, #0
 8003588:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	68f9      	ldr	r1, [r7, #12]
 8003596:	69b8      	ldr	r0, [r7, #24]
 8003598:	f001 f9e8 	bl	800496c <pxPortInitialiseStack>
 800359c:	4602      	mov	r2, r0
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ae:	bf00      	nop
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035c0:	f001 fb02 	bl	8004bc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003678 <prvAddNewTaskToReadyList+0xc0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003678 <prvAddNewTaskToReadyList+0xc0>)
 80035cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035ce:	4b2b      	ldr	r3, [pc, #172]	@ (800367c <prvAddNewTaskToReadyList+0xc4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035d6:	4a29      	ldr	r2, [pc, #164]	@ (800367c <prvAddNewTaskToReadyList+0xc4>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035dc:	4b26      	ldr	r3, [pc, #152]	@ (8003678 <prvAddNewTaskToReadyList+0xc0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d110      	bne.n	8003606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035e4:	f000 fbca 	bl	8003d7c <prvInitialiseTaskLists>
 80035e8:	e00d      	b.n	8003606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035ea:	4b25      	ldr	r3, [pc, #148]	@ (8003680 <prvAddNewTaskToReadyList+0xc8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035f2:	4b22      	ldr	r3, [pc, #136]	@ (800367c <prvAddNewTaskToReadyList+0xc4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d802      	bhi.n	8003606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003600:	4a1e      	ldr	r2, [pc, #120]	@ (800367c <prvAddNewTaskToReadyList+0xc4>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003606:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <prvAddNewTaskToReadyList+0xcc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3301      	adds	r3, #1
 800360c:	4a1d      	ldr	r2, [pc, #116]	@ (8003684 <prvAddNewTaskToReadyList+0xcc>)
 800360e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003610:	4b1c      	ldr	r3, [pc, #112]	@ (8003684 <prvAddNewTaskToReadyList+0xcc>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361c:	2201      	movs	r2, #1
 800361e:	409a      	lsls	r2, r3
 8003620:	4b19      	ldr	r3, [pc, #100]	@ (8003688 <prvAddNewTaskToReadyList+0xd0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <prvAddNewTaskToReadyList+0xd0>)
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4a15      	ldr	r2, [pc, #84]	@ (800368c <prvAddNewTaskToReadyList+0xd4>)
 8003638:	441a      	add	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f7fe fff0 	bl	8002626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003646:	f001 faf1 	bl	8004c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800364a:	4b0d      	ldr	r3, [pc, #52]	@ (8003680 <prvAddNewTaskToReadyList+0xc8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003652:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <prvAddNewTaskToReadyList+0xc4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	429a      	cmp	r2, r3
 800365e:	d207      	bcs.n	8003670 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <prvAddNewTaskToReadyList+0xd8>)
 8003662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200002b4 	.word	0x200002b4
 800367c:	20000114 	.word	0x20000114
 8003680:	200002c0 	.word	0x200002c0
 8003684:	200002d0 	.word	0x200002d0
 8003688:	200002bc 	.word	0x200002bc
 800368c:	20000118 	.word	0x20000118
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800369a:	4b1f      	ldr	r3, [pc, #124]	@ (8003718 <vTaskStartScheduler+0x84>)
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2300      	movs	r3, #0
 80036a4:	2282      	movs	r2, #130	@ 0x82
 80036a6:	491d      	ldr	r1, [pc, #116]	@ (800371c <vTaskStartScheduler+0x88>)
 80036a8:	481d      	ldr	r0, [pc, #116]	@ (8003720 <vTaskStartScheduler+0x8c>)
 80036aa:	f7ff feb3 	bl	8003414 <xTaskCreate>
 80036ae:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d102      	bne.n	80036bc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80036b6:	f000 fe3b 	bl	8004330 <xTimerCreateTimerTask>
 80036ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d116      	bne.n	80036f0 <vTaskStartScheduler+0x5c>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	60bb      	str	r3, [r7, #8]
}
 80036d4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036d6:	4b13      	ldr	r3, [pc, #76]	@ (8003724 <vTaskStartScheduler+0x90>)
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036de:	4b12      	ldr	r3, [pc, #72]	@ (8003728 <vTaskStartScheduler+0x94>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036e4:	4b11      	ldr	r3, [pc, #68]	@ (800372c <vTaskStartScheduler+0x98>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036ea:	f001 f9c9 	bl	8004a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036ee:	e00f      	b.n	8003710 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f6:	d10b      	bne.n	8003710 <vTaskStartScheduler+0x7c>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	607b      	str	r3, [r7, #4]
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <vTaskStartScheduler+0x78>
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200002d8 	.word	0x200002d8
 800371c:	08005274 	.word	0x08005274
 8003720:	08003d4d 	.word	0x08003d4d
 8003724:	200002d4 	.word	0x200002d4
 8003728:	200002c0 	.word	0x200002c0
 800372c:	200002b8 	.word	0x200002b8

08003730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003734:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <vTaskSuspendAll+0x18>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3301      	adds	r3, #1
 800373a:	4a03      	ldr	r2, [pc, #12]	@ (8003748 <vTaskSuspendAll+0x18>)
 800373c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	200002dc 	.word	0x200002dc

0800374c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800375a:	4b42      	ldr	r3, [pc, #264]	@ (8003864 <xTaskResumeAll+0x118>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <xTaskResumeAll+0x2e>
	__asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	603b      	str	r3, [r7, #0]
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	e7fd      	b.n	8003776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800377a:	f001 fa25 	bl	8004bc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800377e:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <xTaskResumeAll+0x118>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3b01      	subs	r3, #1
 8003784:	4a37      	ldr	r2, [pc, #220]	@ (8003864 <xTaskResumeAll+0x118>)
 8003786:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003788:	4b36      	ldr	r3, [pc, #216]	@ (8003864 <xTaskResumeAll+0x118>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d161      	bne.n	8003854 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003790:	4b35      	ldr	r3, [pc, #212]	@ (8003868 <xTaskResumeAll+0x11c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d05d      	beq.n	8003854 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003798:	e02e      	b.n	80037f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800379a:	4b34      	ldr	r3, [pc, #208]	@ (800386c <xTaskResumeAll+0x120>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3318      	adds	r3, #24
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe ff9a 	bl	80026e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe ff95 	bl	80026e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	2201      	movs	r2, #1
 80037bc:	409a      	lsls	r2, r3
 80037be:	4b2c      	ldr	r3, [pc, #176]	@ (8003870 <xTaskResumeAll+0x124>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003870 <xTaskResumeAll+0x124>)
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4a27      	ldr	r2, [pc, #156]	@ (8003874 <xTaskResumeAll+0x128>)
 80037d6:	441a      	add	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f7fe ff21 	bl	8002626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e8:	4b23      	ldr	r3, [pc, #140]	@ (8003878 <xTaskResumeAll+0x12c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80037f2:	4b22      	ldr	r3, [pc, #136]	@ (800387c <xTaskResumeAll+0x130>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037f8:	4b1c      	ldr	r3, [pc, #112]	@ (800386c <xTaskResumeAll+0x120>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1cc      	bne.n	800379a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003806:	f000 fb37 	bl	8003e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800380a:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <xTaskResumeAll+0x134>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003816:	f000 f847 	bl	80038a8 <xTaskIncrementTick>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003820:	4b16      	ldr	r3, [pc, #88]	@ (800387c <xTaskResumeAll+0x130>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3b01      	subs	r3, #1
 800382a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f1      	bne.n	8003816 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003832:	4b13      	ldr	r3, [pc, #76]	@ (8003880 <xTaskResumeAll+0x134>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003838:	4b10      	ldr	r3, [pc, #64]	@ (800387c <xTaskResumeAll+0x130>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003840:	2301      	movs	r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003844:	4b0f      	ldr	r3, [pc, #60]	@ (8003884 <xTaskResumeAll+0x138>)
 8003846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003854:	f001 f9ea 	bl	8004c2c <vPortExitCritical>

	return xAlreadyYielded;
 8003858:	68bb      	ldr	r3, [r7, #8]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200002dc 	.word	0x200002dc
 8003868:	200002b4 	.word	0x200002b4
 800386c:	20000274 	.word	0x20000274
 8003870:	200002bc 	.word	0x200002bc
 8003874:	20000118 	.word	0x20000118
 8003878:	20000114 	.word	0x20000114
 800387c:	200002c8 	.word	0x200002c8
 8003880:	200002c4 	.word	0x200002c4
 8003884:	e000ed04 	.word	0xe000ed04

08003888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800388e:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <xTaskGetTickCount+0x1c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003894:	687b      	ldr	r3, [r7, #4]
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	200002b8 	.word	0x200002b8

080038a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b2:	4b4f      	ldr	r3, [pc, #316]	@ (80039f0 <xTaskIncrementTick+0x148>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 8089 	bne.w	80039ce <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038bc:	4b4d      	ldr	r3, [pc, #308]	@ (80039f4 <xTaskIncrementTick+0x14c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038c4:	4a4b      	ldr	r2, [pc, #300]	@ (80039f4 <xTaskIncrementTick+0x14c>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d121      	bne.n	8003914 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80038d0:	4b49      	ldr	r3, [pc, #292]	@ (80039f8 <xTaskIncrementTick+0x150>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	603b      	str	r3, [r7, #0]
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <xTaskIncrementTick+0x46>
 80038f2:	4b41      	ldr	r3, [pc, #260]	@ (80039f8 <xTaskIncrementTick+0x150>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	4b40      	ldr	r3, [pc, #256]	@ (80039fc <xTaskIncrementTick+0x154>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3e      	ldr	r2, [pc, #248]	@ (80039f8 <xTaskIncrementTick+0x150>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4a3e      	ldr	r2, [pc, #248]	@ (80039fc <xTaskIncrementTick+0x154>)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4b3e      	ldr	r3, [pc, #248]	@ (8003a00 <xTaskIncrementTick+0x158>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3301      	adds	r3, #1
 800390c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a00 <xTaskIncrementTick+0x158>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	f000 fab2 	bl	8003e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003914:	4b3b      	ldr	r3, [pc, #236]	@ (8003a04 <xTaskIncrementTick+0x15c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	429a      	cmp	r2, r3
 800391c:	d348      	bcc.n	80039b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800391e:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <xTaskIncrementTick+0x150>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003928:	4b36      	ldr	r3, [pc, #216]	@ (8003a04 <xTaskIncrementTick+0x15c>)
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	601a      	str	r2, [r3, #0]
					break;
 8003930:	e03e      	b.n	80039b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <xTaskIncrementTick+0x150>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	429a      	cmp	r2, r3
 8003948:	d203      	bcs.n	8003952 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800394a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a04 <xTaskIncrementTick+0x15c>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003950:	e02e      	b.n	80039b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3304      	adds	r3, #4
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fec2 	bl	80026e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3318      	adds	r3, #24
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe feb9 	bl	80026e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	2201      	movs	r2, #1
 8003974:	409a      	lsls	r2, r3
 8003976:	4b24      	ldr	r3, [pc, #144]	@ (8003a08 <xTaskIncrementTick+0x160>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	4a22      	ldr	r2, [pc, #136]	@ (8003a08 <xTaskIncrementTick+0x160>)
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <xTaskIncrementTick+0x164>)
 800398e:	441a      	add	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f7fe fe45 	bl	8002626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <xTaskIncrementTick+0x168>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d3b9      	bcc.n	800391e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ae:	e7b6      	b.n	800391e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039b0:	4b17      	ldr	r3, [pc, #92]	@ (8003a10 <xTaskIncrementTick+0x168>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b6:	4915      	ldr	r1, [pc, #84]	@ (8003a0c <xTaskIncrementTick+0x164>)
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d907      	bls.n	80039d8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e004      	b.n	80039d8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039ce:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <xTaskIncrementTick+0x16c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a14 <xTaskIncrementTick+0x16c>)
 80039d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80039d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <xTaskIncrementTick+0x170>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80039e4:	697b      	ldr	r3, [r7, #20]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	200002dc 	.word	0x200002dc
 80039f4:	200002b8 	.word	0x200002b8
 80039f8:	2000026c 	.word	0x2000026c
 80039fc:	20000270 	.word	0x20000270
 8003a00:	200002cc 	.word	0x200002cc
 8003a04:	200002d4 	.word	0x200002d4
 8003a08:	200002bc 	.word	0x200002bc
 8003a0c:	20000118 	.word	0x20000118
 8003a10:	20000114 	.word	0x20000114
 8003a14:	200002c4 	.word	0x200002c4
 8003a18:	200002c8 	.word	0x200002c8

08003a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a22:	4b27      	ldr	r3, [pc, #156]	@ (8003ac0 <vTaskSwitchContext+0xa4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ac4 <vTaskSwitchContext+0xa8>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a30:	e040      	b.n	8003ab4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003a32:	4b24      	ldr	r3, [pc, #144]	@ (8003ac4 <vTaskSwitchContext+0xa8>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a38:	4b23      	ldr	r3, [pc, #140]	@ (8003ac8 <vTaskSwitchContext+0xac>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a46:	7afb      	ldrb	r3, [r7, #11]
 8003a48:	f1c3 031f 	rsb	r3, r3, #31
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	491f      	ldr	r1, [pc, #124]	@ (8003acc <vTaskSwitchContext+0xb0>)
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	607b      	str	r3, [r7, #4]
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	e7fd      	b.n	8003a76 <vTaskSwitchContext+0x5a>
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4a11      	ldr	r2, [pc, #68]	@ (8003acc <vTaskSwitchContext+0xb0>)
 8003a86:	4413      	add	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	605a      	str	r2, [r3, #4]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d104      	bne.n	8003aaa <vTaskSwitchContext+0x8e>
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a07      	ldr	r2, [pc, #28]	@ (8003ad0 <vTaskSwitchContext+0xb4>)
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	200002dc 	.word	0x200002dc
 8003ac4:	200002c8 	.word	0x200002c8
 8003ac8:	200002bc 	.word	0x200002bc
 8003acc:	20000118 	.word	0x20000118
 8003ad0:	20000114 	.word	0x20000114

08003ad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	60fb      	str	r3, [r7, #12]
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003afc:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <vTaskPlaceOnEventList+0x48>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3318      	adds	r3, #24
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fe fdb2 	bl	800266e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	6838      	ldr	r0, [r7, #0]
 8003b0e:	f000 fba9 	bl	8004264 <prvAddCurrentTaskToDelayedList>
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000114 	.word	0x20000114

08003b20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	617b      	str	r3, [r7, #20]
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	e7fd      	b.n	8003b46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b74 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	4619      	mov	r1, r3
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f7fe fd67 	bl	8002626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	68b8      	ldr	r0, [r7, #8]
 8003b68:	f000 fb7c 	bl	8004264 <prvAddCurrentTaskToDelayedList>
	}
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000114 	.word	0x20000114

08003b78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10b      	bne.n	8003ba6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	60fb      	str	r3, [r7, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	e7fd      	b.n	8003ba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	3318      	adds	r3, #24
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe fd98 	bl	80026e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <xTaskRemoveFromEventList+0xb0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d11c      	bne.n	8003bf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe fd8f 	bl	80026e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	4b18      	ldr	r3, [pc, #96]	@ (8003c2c <xTaskRemoveFromEventList+0xb4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <xTaskRemoveFromEventList+0xb4>)
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4a13      	ldr	r2, [pc, #76]	@ (8003c30 <xTaskRemoveFromEventList+0xb8>)
 8003be2:	441a      	add	r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f7fe fd1b 	bl	8002626 <vListInsertEnd>
 8003bf0:	e005      	b.n	8003bfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	480e      	ldr	r0, [pc, #56]	@ (8003c34 <xTaskRemoveFromEventList+0xbc>)
 8003bfa:	f7fe fd14 	bl	8002626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <xTaskRemoveFromEventList+0xc0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d905      	bls.n	8003c18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c10:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <xTaskRemoveFromEventList+0xc4>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e001      	b.n	8003c1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c1c:	697b      	ldr	r3, [r7, #20]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200002dc 	.word	0x200002dc
 8003c2c:	200002bc 	.word	0x200002bc
 8003c30:	20000118 	.word	0x20000118
 8003c34:	20000274 	.word	0x20000274
 8003c38:	20000114 	.word	0x20000114
 8003c3c:	200002c8 	.word	0x200002c8

08003c40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c48:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <vTaskInternalSetTimeOutState+0x24>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <vTaskInternalSetTimeOutState+0x28>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	200002cc 	.word	0x200002cc
 8003c68:	200002b8 	.word	0x200002b8

08003c6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	613b      	str	r3, [r7, #16]
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	60fb      	str	r3, [r7, #12]
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	e7fd      	b.n	8003cae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003cb2:	f000 ff89 	bl	8004bc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d2c <xTaskCheckForTimeOut+0xc0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d102      	bne.n	8003cd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	e023      	b.n	8003d1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <xTaskCheckForTimeOut+0xc4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d007      	beq.n	8003cf2 <xTaskCheckForTimeOut+0x86>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e015      	b.n	8003d1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d20b      	bcs.n	8003d14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	1ad2      	subs	r2, r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff99 	bl	8003c40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e004      	b.n	8003d1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d1e:	f000 ff85 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 8003d22:	69fb      	ldr	r3, [r7, #28]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200002b8 	.word	0x200002b8
 8003d30:	200002cc 	.word	0x200002cc

08003d34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d38:	4b03      	ldr	r3, [pc, #12]	@ (8003d48 <vTaskMissedYield+0x14>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	200002c8 	.word	0x200002c8

08003d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d54:	f000 f852 	bl	8003dfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d58:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <prvIdleTask+0x28>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d9f9      	bls.n	8003d54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <prvIdleTask+0x2c>)
 8003d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d70:	e7f0      	b.n	8003d54 <prvIdleTask+0x8>
 8003d72:	bf00      	nop
 8003d74:	20000118 	.word	0x20000118
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	e00c      	b.n	8003da2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4a12      	ldr	r2, [pc, #72]	@ (8003ddc <prvInitialiseTaskLists+0x60>)
 8003d94:	4413      	add	r3, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fc18 	bl	80025cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b0e      	cmp	r3, #14
 8003da6:	d9ef      	bls.n	8003d88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003da8:	480d      	ldr	r0, [pc, #52]	@ (8003de0 <prvInitialiseTaskLists+0x64>)
 8003daa:	f7fe fc0f 	bl	80025cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dae:	480d      	ldr	r0, [pc, #52]	@ (8003de4 <prvInitialiseTaskLists+0x68>)
 8003db0:	f7fe fc0c 	bl	80025cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003db4:	480c      	ldr	r0, [pc, #48]	@ (8003de8 <prvInitialiseTaskLists+0x6c>)
 8003db6:	f7fe fc09 	bl	80025cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dba:	480c      	ldr	r0, [pc, #48]	@ (8003dec <prvInitialiseTaskLists+0x70>)
 8003dbc:	f7fe fc06 	bl	80025cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003dc0:	480b      	ldr	r0, [pc, #44]	@ (8003df0 <prvInitialiseTaskLists+0x74>)
 8003dc2:	f7fe fc03 	bl	80025cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <prvInitialiseTaskLists+0x78>)
 8003dc8:	4a05      	ldr	r2, [pc, #20]	@ (8003de0 <prvInitialiseTaskLists+0x64>)
 8003dca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003df8 <prvInitialiseTaskLists+0x7c>)
 8003dce:	4a05      	ldr	r2, [pc, #20]	@ (8003de4 <prvInitialiseTaskLists+0x68>)
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000118 	.word	0x20000118
 8003de0:	20000244 	.word	0x20000244
 8003de4:	20000258 	.word	0x20000258
 8003de8:	20000274 	.word	0x20000274
 8003dec:	20000288 	.word	0x20000288
 8003df0:	200002a0 	.word	0x200002a0
 8003df4:	2000026c 	.word	0x2000026c
 8003df8:	20000270 	.word	0x20000270

08003dfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e02:	e019      	b.n	8003e38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e04:	f000 fee0 	bl	8004bc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e08:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <prvCheckTasksWaitingTermination+0x50>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fc63 	bl	80026e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <prvCheckTasksWaitingTermination+0x54>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	4a0b      	ldr	r2, [pc, #44]	@ (8003e50 <prvCheckTasksWaitingTermination+0x54>)
 8003e22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e24:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <prvCheckTasksWaitingTermination+0x58>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e54 <prvCheckTasksWaitingTermination+0x58>)
 8003e2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e2e:	f000 fefd 	bl	8004c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f810 	bl	8003e58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <prvCheckTasksWaitingTermination+0x58>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e1      	bne.n	8003e04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000288 	.word	0x20000288
 8003e50:	200002b4 	.word	0x200002b4
 8003e54:	2000029c 	.word	0x2000029c

08003e58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 f899 	bl	8004f9c <vPortFree>
			vPortFree( pxTCB );
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f001 f896 	bl	8004f9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb0 <prvResetNextTaskUnblockTime+0x38>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e90:	e008      	b.n	8003ea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e92:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <prvResetNextTaskUnblockTime+0x38>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8003ea2:	6013      	str	r3, [r2, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	2000026c 	.word	0x2000026c
 8003eb4:	200002d4 	.word	0x200002d4

08003eb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <xTaskGetSchedulerState+0x34>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d102      	bne.n	8003ecc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	e008      	b.n	8003ede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ecc:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <xTaskGetSchedulerState+0x38>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	e001      	b.n	8003ede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ede:	687b      	ldr	r3, [r7, #4]
	}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	200002c0 	.word	0x200002c0
 8003ef0:	200002dc 	.word	0x200002dc

08003ef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d069      	beq.n	8003fde <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0e:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <xTaskPriorityInherit+0xf4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d259      	bcs.n	8003fcc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	db06      	blt.n	8003f2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f20:	4b31      	ldr	r3, [pc, #196]	@ (8003fe8 <xTaskPriorityInherit+0xf4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	f1c3 020f 	rsb	r2, r3, #15
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6959      	ldr	r1, [r3, #20]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003fec <xTaskPriorityInherit+0xf8>)
 8003f40:	4413      	add	r3, r2
 8003f42:	4299      	cmp	r1, r3
 8003f44:	d13a      	bne.n	8003fbc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fbc8 	bl	80026e0 <uxListRemove>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d115      	bne.n	8003f82 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5a:	4924      	ldr	r1, [pc, #144]	@ (8003fec <xTaskPriorityInherit+0xf8>)
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <xTaskPriorityInherit+0x8e>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	2201      	movs	r2, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43da      	mvns	r2, r3
 8003f78:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <xTaskPriorityInherit+0xfc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff0 <xTaskPriorityInherit+0xfc>)
 8003f80:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f82:	4b19      	ldr	r3, [pc, #100]	@ (8003fe8 <xTaskPriorityInherit+0xf4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	4b16      	ldr	r3, [pc, #88]	@ (8003ff0 <xTaskPriorityInherit+0xfc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	4a15      	ldr	r2, [pc, #84]	@ (8003ff0 <xTaskPriorityInherit+0xfc>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a10      	ldr	r2, [pc, #64]	@ (8003fec <xTaskPriorityInherit+0xf8>)
 8003fac:	441a      	add	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7fe fb36 	bl	8002626 <vListInsertEnd>
 8003fba:	e004      	b.n	8003fc6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <xTaskPriorityInherit+0xf4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e008      	b.n	8003fde <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fd0:	4b05      	ldr	r3, [pc, #20]	@ (8003fe8 <xTaskPriorityInherit+0xf4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d201      	bcs.n	8003fde <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fde:	68fb      	ldr	r3, [r7, #12]
	}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000114 	.word	0x20000114
 8003fec:	20000118 	.word	0x20000118
 8003ff0:	200002bc 	.word	0x200002bc

08003ff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d070      	beq.n	80040ec <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800400a:	4b3b      	ldr	r3, [pc, #236]	@ (80040f8 <xTaskPriorityDisinherit+0x104>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	429a      	cmp	r2, r3
 8004012:	d00b      	beq.n	800402c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60fb      	str	r3, [r7, #12]
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10b      	bne.n	800404c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	60bb      	str	r3, [r7, #8]
}
 8004046:	bf00      	nop
 8004048:	bf00      	nop
 800404a:	e7fd      	b.n	8004048 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004050:	1e5a      	subs	r2, r3, #1
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800405e:	429a      	cmp	r2, r3
 8004060:	d044      	beq.n	80040ec <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d140      	bne.n	80040ec <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fb36 	bl	80026e0 <uxListRemove>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d115      	bne.n	80040a6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407e:	491f      	ldr	r1, [pc, #124]	@ (80040fc <xTaskPriorityDisinherit+0x108>)
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <xTaskPriorityDisinherit+0xb2>
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	2201      	movs	r2, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <xTaskPriorityDisinherit+0x10c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4013      	ands	r3, r2
 80040a2:	4a17      	ldr	r2, [pc, #92]	@ (8004100 <xTaskPriorityDisinherit+0x10c>)
 80040a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	f1c3 020f 	rsb	r2, r3, #15
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	2201      	movs	r2, #1
 80040c0:	409a      	lsls	r2, r3
 80040c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004100 <xTaskPriorityDisinherit+0x10c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004100 <xTaskPriorityDisinherit+0x10c>)
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4a08      	ldr	r2, [pc, #32]	@ (80040fc <xTaskPriorityDisinherit+0x108>)
 80040da:	441a      	add	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	3304      	adds	r3, #4
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f7fe fa9f 	bl	8002626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040ec:	697b      	ldr	r3, [r7, #20]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000114 	.word	0x20000114
 80040fc:	20000118 	.word	0x20000118
 8004100:	200002bc 	.word	0x200002bc

08004104 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004112:	2301      	movs	r3, #1
 8004114:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8085 	beq.w	8004228 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60fb      	str	r3, [r7, #12]
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	e7fd      	b.n	800413a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d902      	bls.n	800414e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	e002      	b.n	8004154 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004152:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	429a      	cmp	r2, r3
 800415c:	d064      	beq.n	8004228 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	429a      	cmp	r2, r3
 8004166:	d15f      	bne.n	8004228 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004168:	4b31      	ldr	r3, [pc, #196]	@ (8004230 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	429a      	cmp	r2, r3
 8004170:	d10b      	bne.n	800418a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	60bb      	str	r3, [r7, #8]
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	e7fd      	b.n	8004186 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db04      	blt.n	80041a8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f1c3 020f 	rsb	r2, r3, #15
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	6959      	ldr	r1, [r3, #20]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004234 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80041b8:	4413      	add	r3, r2
 80041ba:	4299      	cmp	r1, r3
 80041bc:	d134      	bne.n	8004228 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe fa8c 	bl	80026e0 <uxListRemove>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d115      	bne.n	80041fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d2:	4918      	ldr	r1, [pc, #96]	@ (8004234 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	2201      	movs	r2, #1
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43da      	mvns	r2, r3
 80041f0:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4013      	ands	r3, r2
 80041f6:	4a10      	ldr	r2, [pc, #64]	@ (8004238 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80041f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fe:	2201      	movs	r2, #1
 8004200:	409a      	lsls	r2, r3
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	4a0b      	ldr	r2, [pc, #44]	@ (8004238 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4a06      	ldr	r2, [pc, #24]	@ (8004234 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800421a:	441a      	add	r2, r3
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f7fe f9ff 	bl	8002626 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004228:	bf00      	nop
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000114 	.word	0x20000114
 8004234:	20000118 	.word	0x20000118
 8004238:	200002bc 	.word	0x200002bc

0800423c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004240:	4b07      	ldr	r3, [pc, #28]	@ (8004260 <pvTaskIncrementMutexHeldCount+0x24>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d004      	beq.n	8004252 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <pvTaskIncrementMutexHeldCount+0x24>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800424e:	3201      	adds	r2, #1
 8004250:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 8004252:	4b03      	ldr	r3, [pc, #12]	@ (8004260 <pvTaskIncrementMutexHeldCount+0x24>)
 8004254:	681b      	ldr	r3, [r3, #0]
	}
 8004256:	4618      	mov	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	20000114 	.word	0x20000114

08004264 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800426e:	4b29      	ldr	r3, [pc, #164]	@ (8004314 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004274:	4b28      	ldr	r3, [pc, #160]	@ (8004318 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3304      	adds	r3, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fa30 	bl	80026e0 <uxListRemove>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004286:	4b24      	ldr	r3, [pc, #144]	@ (8004318 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	2201      	movs	r2, #1
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43da      	mvns	r2, r3
 8004294:	4b21      	ldr	r3, [pc, #132]	@ (800431c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4013      	ands	r3, r2
 800429a:	4a20      	ldr	r2, [pc, #128]	@ (800431c <prvAddCurrentTaskToDelayedList+0xb8>)
 800429c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d10a      	bne.n	80042bc <prvAddCurrentTaskToDelayedList+0x58>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	481a      	ldr	r0, [pc, #104]	@ (8004320 <prvAddCurrentTaskToDelayedList+0xbc>)
 80042b6:	f7fe f9b6 	bl	8002626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042ba:	e026      	b.n	800430a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4413      	add	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042c4:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d209      	bcs.n	80042e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d4:	4b13      	ldr	r3, [pc, #76]	@ (8004324 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004318 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7fe f9c4 	bl	800266e <vListInsert>
}
 80042e6:	e010      	b.n	800430a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <prvAddCurrentTaskToDelayedList+0xc4>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004318 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f7fe f9ba 	bl	800266e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042fa:	4b0c      	ldr	r3, [pc, #48]	@ (800432c <prvAddCurrentTaskToDelayedList+0xc8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	d202      	bcs.n	800430a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004304:	4a09      	ldr	r2, [pc, #36]	@ (800432c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6013      	str	r3, [r2, #0]
}
 800430a:	bf00      	nop
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200002b8 	.word	0x200002b8
 8004318:	20000114 	.word	0x20000114
 800431c:	200002bc 	.word	0x200002bc
 8004320:	200002a0 	.word	0x200002a0
 8004324:	20000270 	.word	0x20000270
 8004328:	2000026c 	.word	0x2000026c
 800432c:	200002d4 	.word	0x200002d4

08004330 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800433a:	f000 fae1 	bl	8004900 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800433e:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <xTimerCreateTimerTask+0x58>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004346:	4b11      	ldr	r3, [pc, #68]	@ (800438c <xTimerCreateTimerTask+0x5c>)
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	2302      	movs	r3, #2
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	2300      	movs	r3, #0
 8004350:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004354:	490e      	ldr	r1, [pc, #56]	@ (8004390 <xTimerCreateTimerTask+0x60>)
 8004356:	480f      	ldr	r0, [pc, #60]	@ (8004394 <xTimerCreateTimerTask+0x64>)
 8004358:	f7ff f85c 	bl	8003414 <xTaskCreate>
 800435c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	603b      	str	r3, [r7, #0]
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	e7fd      	b.n	8004378 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800437c:	687b      	ldr	r3, [r7, #4]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000310 	.word	0x20000310
 800438c:	20000314 	.word	0x20000314
 8004390:	0800527c 	.word	0x0800527c
 8004394:	080044d1 	.word	0x080044d1

08004398 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	@ 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	623b      	str	r3, [r7, #32]
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043c8:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <xTimerGenericCommand+0x98>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02a      	beq.n	8004426 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b05      	cmp	r3, #5
 80043e0:	dc18      	bgt.n	8004414 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043e2:	f7ff fd69 	bl	8003eb8 <xTaskGetSchedulerState>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d109      	bne.n	8004400 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043ec:	4b10      	ldr	r3, [pc, #64]	@ (8004430 <xTimerGenericCommand+0x98>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	f107 0114 	add.w	r1, r7, #20
 80043f4:	2300      	movs	r3, #0
 80043f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f8:	f7fe fa66 	bl	80028c8 <xQueueGenericSend>
 80043fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80043fe:	e012      	b.n	8004426 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <xTimerGenericCommand+0x98>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	f107 0114 	add.w	r1, r7, #20
 8004408:	2300      	movs	r3, #0
 800440a:	2200      	movs	r2, #0
 800440c:	f7fe fa5c 	bl	80028c8 <xQueueGenericSend>
 8004410:	6278      	str	r0, [r7, #36]	@ 0x24
 8004412:	e008      	b.n	8004426 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004414:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <xTimerGenericCommand+0x98>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	f107 0114 	add.w	r1, r7, #20
 800441c:	2300      	movs	r3, #0
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	f7fe fb54 	bl	8002acc <xQueueGenericSendFromISR>
 8004424:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004428:	4618      	mov	r0, r3
 800442a:	3728      	adds	r7, #40	@ 0x28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000310 	.word	0x20000310

08004434 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443e:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <prvProcessExpiredTimer+0x98>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3304      	adds	r3, #4
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe f947 	bl	80026e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d023      	beq.n	80044a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	18d1      	adds	r1, r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	6978      	ldr	r0, [r7, #20]
 800446e:	f000 f8d5 	bl	800461c <prvInsertTimerInActiveList>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004478:	2300      	movs	r3, #0
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	2100      	movs	r1, #0
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff88 	bl	8004398 <xTimerGenericCommand>
 8004488:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d114      	bne.n	80044ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	60fb      	str	r3, [r7, #12]
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	6978      	ldr	r0, [r7, #20]
 80044c0:	4798      	blx	r3
}
 80044c2:	bf00      	nop
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000308 	.word	0x20000308

080044d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044d8:	f107 0308 	add.w	r3, r7, #8
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f859 	bl	8004594 <prvGetNextExpireTime>
 80044e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4619      	mov	r1, r3
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f805 	bl	80044f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044ee:	f000 f8d7 	bl	80046a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044f2:	bf00      	nop
 80044f4:	e7f0      	b.n	80044d8 <prvTimerTask+0x8>
	...

080044f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004502:	f7ff f915 	bl	8003730 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f866 	bl	80045dc <prvSampleTimeNow>
 8004510:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d130      	bne.n	800457a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <prvProcessTimerOrBlockTask+0x3c>
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	429a      	cmp	r2, r3
 8004524:	d806      	bhi.n	8004534 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004526:	f7ff f911 	bl	800374c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800452a:	68f9      	ldr	r1, [r7, #12]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ff81 	bl	8004434 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004532:	e024      	b.n	800457e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800453a:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <prvProcessTimerOrBlockTask+0x90>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <prvProcessTimerOrBlockTask+0x50>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <prvProcessTimerOrBlockTask+0x52>
 8004548:	2300      	movs	r3, #0
 800454a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800454c:	4b0f      	ldr	r3, [pc, #60]	@ (800458c <prvProcessTimerOrBlockTask+0x94>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	f7fe ff27 	bl	80033ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800455e:	f7ff f8f5 	bl	800374c <xTaskResumeAll>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004568:	4b09      	ldr	r3, [pc, #36]	@ (8004590 <prvProcessTimerOrBlockTask+0x98>)
 800456a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	f3bf 8f6f 	isb	sy
}
 8004578:	e001      	b.n	800457e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800457a:	f7ff f8e7 	bl	800374c <xTaskResumeAll>
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000030c 	.word	0x2000030c
 800458c:	20000310 	.word	0x20000310
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800459c:	4b0e      	ldr	r3, [pc, #56]	@ (80045d8 <prvGetNextExpireTime+0x44>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <prvGetNextExpireTime+0x16>
 80045a6:	2201      	movs	r2, #1
 80045a8:	e000      	b.n	80045ac <prvGetNextExpireTime+0x18>
 80045aa:	2200      	movs	r2, #0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045b8:	4b07      	ldr	r3, [pc, #28]	@ (80045d8 <prvGetNextExpireTime+0x44>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e001      	b.n	80045c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045c8:	68fb      	ldr	r3, [r7, #12]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000308 	.word	0x20000308

080045dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045e4:	f7ff f950 	bl	8003888 <xTaskGetTickCount>
 80045e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <prvSampleTimeNow+0x3c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d205      	bcs.n	8004600 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045f4:	f000 f91e 	bl	8004834 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e002      	b.n	8004606 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004606:	4a04      	ldr	r2, [pc, #16]	@ (8004618 <prvSampleTimeNow+0x3c>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000318 	.word	0x20000318

0800461c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d812      	bhi.n	8004668 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	429a      	cmp	r2, r3
 800464e:	d302      	bcc.n	8004656 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e01b      	b.n	800468e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <prvInsertTimerInActiveList+0x7c>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7fe f804 	bl	800266e <vListInsert>
 8004666:	e012      	b.n	800468e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d206      	bcs.n	800467e <prvInsertTimerInActiveList+0x62>
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d302      	bcc.n	800467e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004678:	2301      	movs	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	e007      	b.n	800468e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800467e:	4b07      	ldr	r3, [pc, #28]	@ (800469c <prvInsertTimerInActiveList+0x80>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3304      	adds	r3, #4
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7fd fff0 	bl	800266e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800468e:	697b      	ldr	r3, [r7, #20]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	2000030c 	.word	0x2000030c
 800469c:	20000308 	.word	0x20000308

080046a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08c      	sub	sp, #48	@ 0x30
 80046a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046a6:	e0b2      	b.n	800480e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f2c0 80af 	blt.w	800480e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d004      	beq.n	80046c6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe f80d 	bl	80026e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff87 	bl	80045dc <prvSampleTimeNow>
 80046ce:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b09      	cmp	r3, #9
 80046d4:	f200 8098 	bhi.w	8004808 <prvProcessReceivedCommands+0x168>
 80046d8:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <prvProcessReceivedCommands+0x40>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004709 	.word	0x08004709
 80046ec:	0800477f 	.word	0x0800477f
 80046f0:	08004793 	.word	0x08004793
 80046f4:	080047df 	.word	0x080047df
 80046f8:	08004709 	.word	0x08004709
 80046fc:	08004709 	.word	0x08004709
 8004700:	0800477f 	.word	0x0800477f
 8004704:	08004793 	.word	0x08004793
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	b2da      	uxtb	r2, r3
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	18d1      	adds	r1, r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a3a      	ldr	r2, [r7, #32]
 8004726:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004728:	f7ff ff78 	bl	800461c <prvInsertTimerInActiveList>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d06c      	beq.n	800480c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004738:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d061      	beq.n	800480c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	441a      	add	r2, r3
 8004750:	2300      	movs	r3, #0
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	2100      	movs	r1, #0
 8004758:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800475a:	f7ff fe1d 	bl	8004398 <xTimerGenericCommand>
 800475e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d152      	bne.n	800480c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	61bb      	str	r3, [r7, #24]
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	e7fd      	b.n	800477a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	b2da      	uxtb	r2, r3
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004790:	e03d      	b.n	800480e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	b2da      	uxtb	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	617b      	str	r3, [r7, #20]
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	18d1      	adds	r1, r2, r3
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047d8:	f7ff ff20 	bl	800461c <prvInsertTimerInActiveList>
					break;
 80047dc:	e017      	b.n	800480e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d103      	bne.n	80047f4 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 80047ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047ee:	f000 fbd5 	bl	8004f9c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047f2:	e00c      	b.n	800480e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004806:	e002      	b.n	800480e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8004808:	bf00      	nop
 800480a:	e000      	b.n	800480e <prvProcessReceivedCommands+0x16e>
					break;
 800480c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800480e:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <prvProcessReceivedCommands+0x190>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f107 0108 	add.w	r1, r7, #8
 8004816:	2200      	movs	r2, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe fa83 	bl	8002d24 <xQueueReceive>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	f47f af41 	bne.w	80046a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	3728      	adds	r7, #40	@ 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000310 	.word	0x20000310

08004834 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800483a:	e049      	b.n	80048d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800483c:	4b2e      	ldr	r3, [pc, #184]	@ (80048f8 <prvSwitchTimerLists+0xc4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004846:	4b2c      	ldr	r3, [pc, #176]	@ (80048f8 <prvSwitchTimerLists+0xc4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fd ff43 	bl	80026e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d02f      	beq.n	80048d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	d90e      	bls.n	80048a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800488e:	4b1a      	ldr	r3, [pc, #104]	@ (80048f8 <prvSwitchTimerLists+0xc4>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3304      	adds	r3, #4
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f7fd fee8 	bl	800266e <vListInsert>
 800489e:	e017      	b.n	80048d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048a0:	2300      	movs	r3, #0
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2300      	movs	r3, #0
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	2100      	movs	r1, #0
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff fd74 	bl	8004398 <xTimerGenericCommand>
 80048b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10b      	bne.n	80048d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	603b      	str	r3, [r7, #0]
}
 80048ca:	bf00      	nop
 80048cc:	bf00      	nop
 80048ce:	e7fd      	b.n	80048cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048d0:	4b09      	ldr	r3, [pc, #36]	@ (80048f8 <prvSwitchTimerLists+0xc4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1b0      	bne.n	800483c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048da:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <prvSwitchTimerLists+0xc4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <prvSwitchTimerLists+0xc8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a04      	ldr	r2, [pc, #16]	@ (80048f8 <prvSwitchTimerLists+0xc4>)
 80048e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048e8:	4a04      	ldr	r2, [pc, #16]	@ (80048fc <prvSwitchTimerLists+0xc8>)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6013      	str	r3, [r2, #0]
}
 80048ee:	bf00      	nop
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000308 	.word	0x20000308
 80048fc:	2000030c 	.word	0x2000030c

08004900 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004904:	f000 f960 	bl	8004bc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004908:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <prvCheckForValidListAndQueue+0x54>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11d      	bne.n	800494c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004910:	4811      	ldr	r0, [pc, #68]	@ (8004958 <prvCheckForValidListAndQueue+0x58>)
 8004912:	f7fd fe5b 	bl	80025cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004916:	4811      	ldr	r0, [pc, #68]	@ (800495c <prvCheckForValidListAndQueue+0x5c>)
 8004918:	f7fd fe58 	bl	80025cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800491c:	4b10      	ldr	r3, [pc, #64]	@ (8004960 <prvCheckForValidListAndQueue+0x60>)
 800491e:	4a0e      	ldr	r2, [pc, #56]	@ (8004958 <prvCheckForValidListAndQueue+0x58>)
 8004920:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004922:	4b10      	ldr	r3, [pc, #64]	@ (8004964 <prvCheckForValidListAndQueue+0x64>)
 8004924:	4a0d      	ldr	r2, [pc, #52]	@ (800495c <prvCheckForValidListAndQueue+0x5c>)
 8004926:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004928:	2200      	movs	r2, #0
 800492a:	210c      	movs	r1, #12
 800492c:	200a      	movs	r0, #10
 800492e:	f7fd ff6b 	bl	8002808 <xQueueGenericCreate>
 8004932:	4603      	mov	r3, r0
 8004934:	4a07      	ldr	r2, [pc, #28]	@ (8004954 <prvCheckForValidListAndQueue+0x54>)
 8004936:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <prvCheckForValidListAndQueue+0x54>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004940:	4b04      	ldr	r3, [pc, #16]	@ (8004954 <prvCheckForValidListAndQueue+0x54>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4908      	ldr	r1, [pc, #32]	@ (8004968 <prvCheckForValidListAndQueue+0x68>)
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fd06 	bl	8003358 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800494c:	f000 f96e 	bl	8004c2c <vPortExitCritical>
}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000310 	.word	0x20000310
 8004958:	200002e0 	.word	0x200002e0
 800495c:	200002f4 	.word	0x200002f4
 8004960:	20000308 	.word	0x20000308
 8004964:	2000030c 	.word	0x2000030c
 8004968:	08005284 	.word	0x08005284

0800496c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3b04      	subs	r3, #4
 800497c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3b04      	subs	r3, #4
 800498a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f023 0201 	bic.w	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3b04      	subs	r3, #4
 800499a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800499c:	4a0c      	ldr	r2, [pc, #48]	@ (80049d0 <pxPortInitialiseStack+0x64>)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b14      	subs	r3, #20
 80049a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3b04      	subs	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f06f 0202 	mvn.w	r2, #2
 80049ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3b20      	subs	r3, #32
 80049c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049c2:	68fb      	ldr	r3, [r7, #12]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	080049d5 	.word	0x080049d5

080049d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049de:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <prvTaskExitError+0x58>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d00b      	beq.n	8004a00 <prvTaskExitError+0x2c>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	e7fd      	b.n	80049fc <prvTaskExitError+0x28>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60bb      	str	r3, [r7, #8]
}
 8004a12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a14:	bf00      	nop
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0fc      	beq.n	8004a16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	2000000c 	.word	0x2000000c

08004a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a30:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <pxCurrentTCBConst2>)
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	6808      	ldr	r0, [r1, #0]
 8004a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3a:	f380 8809 	msr	PSP, r0
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f380 8811 	msr	BASEPRI, r0
 8004a4a:	4770      	bx	lr
 8004a4c:	f3af 8000 	nop.w

08004a50 <pxCurrentTCBConst2>:
 8004a50:	20000114 	.word	0x20000114
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop

08004a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a58:	4808      	ldr	r0, [pc, #32]	@ (8004a7c <prvPortStartFirstTask+0x24>)
 8004a5a:	6800      	ldr	r0, [r0, #0]
 8004a5c:	6800      	ldr	r0, [r0, #0]
 8004a5e:	f380 8808 	msr	MSP, r0
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8814 	msr	CONTROL, r0
 8004a6a:	b662      	cpsie	i
 8004a6c:	b661      	cpsie	f
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	df00      	svc	0
 8004a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a7a:	bf00      	nop
 8004a7c:	e000ed08 	.word	0xe000ed08

08004a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a86:	4b47      	ldr	r3, [pc, #284]	@ (8004ba4 <xPortStartScheduler+0x124>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a47      	ldr	r2, [pc, #284]	@ (8004ba8 <xPortStartScheduler+0x128>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10b      	bne.n	8004aa8 <xPortStartScheduler+0x28>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60fb      	str	r3, [r7, #12]
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	e7fd      	b.n	8004aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba4 <xPortStartScheduler+0x124>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3f      	ldr	r2, [pc, #252]	@ (8004bac <xPortStartScheduler+0x12c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d10b      	bne.n	8004aca <xPortStartScheduler+0x4a>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	613b      	str	r3, [r7, #16]
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	e7fd      	b.n	8004ac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aca:	4b39      	ldr	r3, [pc, #228]	@ (8004bb0 <xPortStartScheduler+0x130>)
 8004acc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	22ff      	movs	r2, #255	@ 0xff
 8004ada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	4b31      	ldr	r3, [pc, #196]	@ (8004bb4 <xPortStartScheduler+0x134>)
 8004af0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004af2:	4b31      	ldr	r3, [pc, #196]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004af4:	2207      	movs	r2, #7
 8004af6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004af8:	e009      	b.n	8004b0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004afa:	4b2f      	ldr	r3, [pc, #188]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b16:	2b80      	cmp	r3, #128	@ 0x80
 8004b18:	d0ef      	beq.n	8004afa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b1a:	4b27      	ldr	r3, [pc, #156]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1c3 0307 	rsb	r3, r3, #7
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d00b      	beq.n	8004b3e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60bb      	str	r3, [r7, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b48:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b50:	4a19      	ldr	r2, [pc, #100]	@ (8004bb8 <xPortStartScheduler+0x138>)
 8004b52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b5c:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <xPortStartScheduler+0x13c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <xPortStartScheduler+0x13c>)
 8004b62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b68:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <xPortStartScheduler+0x13c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a13      	ldr	r2, [pc, #76]	@ (8004bbc <xPortStartScheduler+0x13c>)
 8004b6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b74:	f000 f8da 	bl	8004d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b78:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <xPortStartScheduler+0x140>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b7e:	f000 f8f9 	bl	8004d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b82:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <xPortStartScheduler+0x144>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc4 <xPortStartScheduler+0x144>)
 8004b88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b8e:	f7ff ff63 	bl	8004a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b92:	f7fe ff43 	bl	8003a1c <vTaskSwitchContext>
	prvTaskExitError();
 8004b96:	f7ff ff1d 	bl	80049d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	e000ed00 	.word	0xe000ed00
 8004ba8:	410fc271 	.word	0x410fc271
 8004bac:	410fc270 	.word	0x410fc270
 8004bb0:	e000e400 	.word	0xe000e400
 8004bb4:	2000031c 	.word	0x2000031c
 8004bb8:	20000320 	.word	0x20000320
 8004bbc:	e000ed20 	.word	0xe000ed20
 8004bc0:	2000000c 	.word	0x2000000c
 8004bc4:	e000ef34 	.word	0xe000ef34

08004bc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	607b      	str	r3, [r7, #4]
}
 8004be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004be2:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <vPortEnterCritical+0x5c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a0e      	ldr	r2, [pc, #56]	@ (8004c24 <vPortEnterCritical+0x5c>)
 8004bea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bec:	4b0d      	ldr	r3, [pc, #52]	@ (8004c24 <vPortEnterCritical+0x5c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d110      	bne.n	8004c16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <vPortEnterCritical+0x60>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <vPortEnterCritical+0x4e>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	603b      	str	r3, [r7, #0]
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	e7fd      	b.n	8004c12 <vPortEnterCritical+0x4a>
	}
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	2000000c 	.word	0x2000000c
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c32:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <vPortExitCritical+0x26>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	607b      	str	r3, [r7, #4]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c52:	4b0a      	ldr	r3, [pc, #40]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c5c:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <vPortExitCritical+0x44>
 8004c64:	2300      	movs	r3, #0
 8004c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f383 8811 	msr	BASEPRI, r3
}
 8004c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c80:	f3ef 8009 	mrs	r0, PSP
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4b15      	ldr	r3, [pc, #84]	@ (8004ce0 <pxCurrentTCBConst>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	f01e 0f10 	tst.w	lr, #16
 8004c90:	bf08      	it	eq
 8004c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	6010      	str	r0, [r2, #0]
 8004c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ca4:	f380 8811 	msr	BASEPRI, r0
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f7fe feb4 	bl	8003a1c <vTaskSwitchContext>
 8004cb4:	f04f 0000 	mov.w	r0, #0
 8004cb8:	f380 8811 	msr	BASEPRI, r0
 8004cbc:	bc09      	pop	{r0, r3}
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	6808      	ldr	r0, [r1, #0]
 8004cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc6:	f01e 0f10 	tst.w	lr, #16
 8004cca:	bf08      	it	eq
 8004ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cd0:	f380 8809 	msr	PSP, r0
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	f3af 8000 	nop.w

08004ce0 <pxCurrentTCBConst>:
 8004ce0:	20000114 	.word	0x20000114
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	607b      	str	r3, [r7, #4]
}
 8004d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d02:	f7fe fdd1 	bl	80038a8 <xTaskIncrementTick>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <SysTick_Handler+0x40>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f383 8811 	msr	BASEPRI, r3
}
 8004d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d36:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <vPortSetupTimerInterrupt+0x38>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d68 <vPortSetupTimerInterrupt+0x3c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	@ (8004d6c <vPortSetupTimerInterrupt+0x40>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	4a09      	ldr	r2, [pc, #36]	@ (8004d70 <vPortSetupTimerInterrupt+0x44>)
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d4e:	4b04      	ldr	r3, [pc, #16]	@ (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	e000e010 	.word	0xe000e010
 8004d64:	e000e018 	.word	0xe000e018
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	10624dd3 	.word	0x10624dd3
 8004d70:	e000e014 	.word	0xe000e014

08004d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d84 <vPortEnableVFP+0x10>
 8004d78:	6801      	ldr	r1, [r0, #0]
 8004d7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004d7e:	6001      	str	r1, [r0, #0]
 8004d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d82:	bf00      	nop
 8004d84:	e000ed88 	.word	0xe000ed88

08004d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d8e:	f3ef 8305 	mrs	r3, IPSR
 8004d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b0f      	cmp	r3, #15
 8004d98:	d915      	bls.n	8004dc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d9a:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <vPortValidateInterruptPriority+0x74>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004da4:	4b16      	ldr	r3, [pc, #88]	@ (8004e00 <vPortValidateInterruptPriority+0x78>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	7afa      	ldrb	r2, [r7, #11]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d20b      	bcs.n	8004dc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e04 <vPortValidateInterruptPriority+0x7c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004dce:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <vPortValidateInterruptPriority+0x80>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d90b      	bls.n	8004dee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	603b      	str	r3, [r7, #0]
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	e7fd      	b.n	8004dea <vPortValidateInterruptPriority+0x62>
	}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	e000e3f0 	.word	0xe000e3f0
 8004e00:	2000031c 	.word	0x2000031c
 8004e04:	e000ed0c 	.word	0xe000ed0c
 8004e08:	20000320 	.word	0x20000320

08004e0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	@ 0x28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e18:	f7fe fc8a 	bl	8003730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004f88 <pvPortMalloc+0x17c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e24:	f000 f916 	bl	8005054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e28:	4b58      	ldr	r3, [pc, #352]	@ (8004f8c <pvPortMalloc+0x180>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 8090 	bne.w	8004f56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01e      	beq.n	8004e7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d015      	beq.n	8004e7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f023 0307 	bic.w	r3, r3, #7
 8004e54:	3308      	adds	r3, #8
 8004e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <pvPortMalloc+0x6e>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	617b      	str	r3, [r7, #20]
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	e7fd      	b.n	8004e76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d06a      	beq.n	8004f56 <pvPortMalloc+0x14a>
 8004e80:	4b43      	ldr	r3, [pc, #268]	@ (8004f90 <pvPortMalloc+0x184>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d865      	bhi.n	8004f56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e8a:	4b42      	ldr	r3, [pc, #264]	@ (8004f94 <pvPortMalloc+0x188>)
 8004e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e8e:	4b41      	ldr	r3, [pc, #260]	@ (8004f94 <pvPortMalloc+0x188>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e94:	e004      	b.n	8004ea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d903      	bls.n	8004eb2 <pvPortMalloc+0xa6>
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f1      	bne.n	8004e96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004eb2:	4b35      	ldr	r3, [pc, #212]	@ (8004f88 <pvPortMalloc+0x17c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d04c      	beq.n	8004f56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	4413      	add	r3, r2
 8004ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	1ad2      	subs	r2, r2, r3
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d920      	bls.n	8004f20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <pvPortMalloc+0xfc>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	613b      	str	r3, [r7, #16]
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	e7fd      	b.n	8004f04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f1a:	69b8      	ldr	r0, [r7, #24]
 8004f1c:	f000 f8fc 	bl	8005118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f20:	4b1b      	ldr	r3, [pc, #108]	@ (8004f90 <pvPortMalloc+0x184>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	4a19      	ldr	r2, [pc, #100]	@ (8004f90 <pvPortMalloc+0x184>)
 8004f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f2e:	4b18      	ldr	r3, [pc, #96]	@ (8004f90 <pvPortMalloc+0x184>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <pvPortMalloc+0x18c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d203      	bcs.n	8004f42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f3a:	4b15      	ldr	r3, [pc, #84]	@ (8004f90 <pvPortMalloc+0x184>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <pvPortMalloc+0x18c>)
 8004f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	4b11      	ldr	r3, [pc, #68]	@ (8004f8c <pvPortMalloc+0x180>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f56:	f7fe fbf9 	bl	800374c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <pvPortMalloc+0x170>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60fb      	str	r3, [r7, #12]
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <pvPortMalloc+0x16c>
	return pvReturn;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3728      	adds	r7, #40	@ 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20012f2c 	.word	0x20012f2c
 8004f8c:	20012f38 	.word	0x20012f38
 8004f90:	20012f30 	.word	0x20012f30
 8004f94:	20012f24 	.word	0x20012f24
 8004f98:	20012f34 	.word	0x20012f34

08004f9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d04a      	beq.n	8005044 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fae:	2308      	movs	r3, #8
 8004fb0:	425b      	negs	r3, r3
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4b22      	ldr	r3, [pc, #136]	@ (800504c <vPortFree+0xb0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10b      	bne.n	8004fe2 <vPortFree+0x46>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	60fb      	str	r3, [r7, #12]
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	e7fd      	b.n	8004fde <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <vPortFree+0x66>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	60bb      	str	r3, [r7, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	e7fd      	b.n	8004ffe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	4b11      	ldr	r3, [pc, #68]	@ (800504c <vPortFree+0xb0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d019      	beq.n	8005044 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d115      	bne.n	8005044 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	4b0b      	ldr	r3, [pc, #44]	@ (800504c <vPortFree+0xb0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	43db      	mvns	r3, r3
 8005022:	401a      	ands	r2, r3
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005028:	f7fe fb82 	bl	8003730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	4b07      	ldr	r3, [pc, #28]	@ (8005050 <vPortFree+0xb4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4413      	add	r3, r2
 8005036:	4a06      	ldr	r2, [pc, #24]	@ (8005050 <vPortFree+0xb4>)
 8005038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800503a:	6938      	ldr	r0, [r7, #16]
 800503c:	f000 f86c 	bl	8005118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005040:	f7fe fb84 	bl	800374c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005044:	bf00      	nop
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20012f38 	.word	0x20012f38
 8005050:	20012f30 	.word	0x20012f30

08005054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800505a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800505e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005060:	4b27      	ldr	r3, [pc, #156]	@ (8005100 <prvHeapInit+0xac>)
 8005062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3307      	adds	r3, #7
 8005072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	4a1f      	ldr	r2, [pc, #124]	@ (8005100 <prvHeapInit+0xac>)
 8005084:	4413      	add	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800508c:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <prvHeapInit+0xb0>)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005092:	4b1c      	ldr	r3, [pc, #112]	@ (8005104 <prvHeapInit+0xb0>)
 8005094:	2200      	movs	r2, #0
 8005096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	4413      	add	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050a0:	2208      	movs	r2, #8
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0307 	bic.w	r3, r3, #7
 80050ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a15      	ldr	r2, [pc, #84]	@ (8005108 <prvHeapInit+0xb4>)
 80050b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050b6:	4b14      	ldr	r3, [pc, #80]	@ (8005108 <prvHeapInit+0xb4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050be:	4b12      	ldr	r3, [pc, #72]	@ (8005108 <prvHeapInit+0xb4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005108 <prvHeapInit+0xb4>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	4a0a      	ldr	r2, [pc, #40]	@ (800510c <prvHeapInit+0xb8>)
 80050e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a09      	ldr	r2, [pc, #36]	@ (8005110 <prvHeapInit+0xbc>)
 80050ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050ec:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <prvHeapInit+0xc0>)
 80050ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050f2:	601a      	str	r2, [r3, #0]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	20000324 	.word	0x20000324
 8005104:	20012f24 	.word	0x20012f24
 8005108:	20012f2c 	.word	0x20012f2c
 800510c:	20012f34 	.word	0x20012f34
 8005110:	20012f30 	.word	0x20012f30
 8005114:	20012f38 	.word	0x20012f38

08005118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005120:	4b28      	ldr	r3, [pc, #160]	@ (80051c4 <prvInsertBlockIntoFreeList+0xac>)
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e002      	b.n	800512c <prvInsertBlockIntoFreeList+0x14>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	429a      	cmp	r2, r3
 8005134:	d8f7      	bhi.n	8005126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	4413      	add	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d108      	bne.n	800515a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	441a      	add	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	441a      	add	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d118      	bne.n	80051a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b15      	ldr	r3, [pc, #84]	@ (80051c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d00d      	beq.n	8005196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	441a      	add	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e008      	b.n	80051a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005196:	4b0c      	ldr	r3, [pc, #48]	@ (80051c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e003      	b.n	80051a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d002      	beq.n	80051b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20012f24 	.word	0x20012f24
 80051c8:	20012f2c 	.word	0x20012f2c

080051cc <memset>:
 80051cc:	4402      	add	r2, r0
 80051ce:	4603      	mov	r3, r0
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d100      	bne.n	80051d6 <memset+0xa>
 80051d4:	4770      	bx	lr
 80051d6:	f803 1b01 	strb.w	r1, [r3], #1
 80051da:	e7f9      	b.n	80051d0 <memset+0x4>

080051dc <__libc_init_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4d0d      	ldr	r5, [pc, #52]	@ (8005214 <__libc_init_array+0x38>)
 80051e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005218 <__libc_init_array+0x3c>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	2600      	movs	r6, #0
 80051e8:	42a6      	cmp	r6, r4
 80051ea:	d109      	bne.n	8005200 <__libc_init_array+0x24>
 80051ec:	4d0b      	ldr	r5, [pc, #44]	@ (800521c <__libc_init_array+0x40>)
 80051ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005220 <__libc_init_array+0x44>)
 80051f0:	f000 f826 	bl	8005240 <_init>
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	2600      	movs	r6, #0
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	d105      	bne.n	800520a <__libc_init_array+0x2e>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f855 3b04 	ldr.w	r3, [r5], #4
 8005204:	4798      	blx	r3
 8005206:	3601      	adds	r6, #1
 8005208:	e7ee      	b.n	80051e8 <__libc_init_array+0xc>
 800520a:	f855 3b04 	ldr.w	r3, [r5], #4
 800520e:	4798      	blx	r3
 8005210:	3601      	adds	r6, #1
 8005212:	e7f2      	b.n	80051fa <__libc_init_array+0x1e>
 8005214:	080052ac 	.word	0x080052ac
 8005218:	080052ac 	.word	0x080052ac
 800521c:	080052ac 	.word	0x080052ac
 8005220:	080052b0 	.word	0x080052b0

08005224 <memcpy>:
 8005224:	440a      	add	r2, r1
 8005226:	4291      	cmp	r1, r2
 8005228:	f100 33ff 	add.w	r3, r0, #4294967295
 800522c:	d100      	bne.n	8005230 <memcpy+0xc>
 800522e:	4770      	bx	lr
 8005230:	b510      	push	{r4, lr}
 8005232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800523a:	4291      	cmp	r1, r2
 800523c:	d1f9      	bne.n	8005232 <memcpy+0xe>
 800523e:	bd10      	pop	{r4, pc}

08005240 <_init>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr

0800524c <_fini>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr
